<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Bienvenue sur Magic-Hub!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>sf</text></svg>">
        {% block stylesheets %}
          <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glidejs/glide@3.5.2/dist/css/glide.core.min.css">
          <link href="https://fonts.googleapis.com/css2?family=Averia+Serif+Libre:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap" rel="stylesheet">
          <link rel="stylesheet" href="{{ asset('styles/app.css') }}">
        {% endblock %}
      </head>
      <body>

        <div class="flex w-screen justify-center">
            <nav id="navbar" class="transition-all flex justify-center duration-500 ease-in-out fixed w-full rounded text-lg top-0 bg-black bg-opacity-0 z-40">
                <div class="w-4/5 inline-flex justify-between py-5 px-2 text-normal averia-serif-libre-light">
                    
                    <!-- Bento Icon for Mobile -->

        
                    <!-- Navigation Menu -->
                    <div id="nav-menu" class=" space-x-4 items-center transition-all duration-500 ease-in-out">
                        <a class="white hover:underline" href="{{ path('app_home') }}">Accueil</a>
                        <a class="white hover:underline" href="{{ path('all_sets') }}">Sets/extensions</a>
                        <span class="text-white"> | </span>
                        <a class="white hover:underline" href="{{ path('app_search', {'search': 'basic', 'parameter': 'none'}) }}">Recherche de cartes</a>
                        <a class="white hover:underline" href="{{ path('app_decks', {'param': 'all'}) }}">Decks</a>
                        <span class="text-white"> | </span>
                        <a class="white hover:underline" href="{{ path('app_forum') }}">Forum</a>
                        {% if app.user %}
                            <a class="white hover:underline" href="{{ path('app_articleForm')}}">Article</a>
                        {% endif %}
                    </div>
                    <div class="space-x-4">
                        {% if app.user %}
                            <a class="white hover:underline" href="{{ path('app_deck_manager', {'id': app.user.id})}}">Mes Decks</a>
                            <span class="text-white"> | </span>
                            {% if app.user.globalChat is same as false and unread_count() > 0 %}
                                <span class="text-white text-xs italic border-white border p-1">
                                    {{ unread_count() }} 
                                    {{ unread_count() > 1 ? 'nouveaux' : 'nouveau' }} 
                                    message{{ unread_count() > 1 ? 's' : '' }}
                                </span>
                            {% endif %}
                            <a class="white hover:underline" href="{{ path('chatting') }}">Messagerie</a>
                            <a class="white hover:underline" href="{{ path('app_profile_self') }}">Mon profil</a>
                            <span class="text-white"> | </span>
                            <a class="white hover:underline" href="{{ path('app_logout') }}">Se déconnecter</a>
                        {% else %}
                            <a class="white hover:underline" href="{{ path('app_login') }}">Se connecter</a>
                            <span class="text-white"> | </span>
                            <a class="white hover:underline" href="{{ path('app_register') }}">S'inscrire</a>
                        {% endif %}
                    </div>
        
                    <!-- Bento Grid Menu -->
                    <div id="bento-menu" class="hidden absolute top-16 right-0 bg-black bg-opacity-90 text-white grid grid-cols-2 gap-4 p-4 w-64 rounded-lg">
                        <a href="{{ path('app_home') }}" class="hover:bg-gray-700 p-2 rounded">Accueil</a>
                        <a href="{{ path('all_sets') }}" class="hover:bg-gray-700 p-2 rounded">Sets/extensions</a>
                        <a href="{{ path('app_search', {'search': 'basic', 'parameter': 'none'}) }}" class="hover:bg-gray-700 p-2 rounded">Recherche de cartes</a>
                        <a href="{{ path('app_decks', {'param': 'all'}) }}" class="hover:bg-gray-700 p-2 rounded">Decks</a>
                        <a href="{{ path('app_forum') }}" class="hover:bg-gray-700 p-2 rounded">Forum</a>
                        
                        {% if app.user %}
                            <a href="{{ path('app_articleForm') }}" class="hover:bg-gray-700 p-2 rounded">Article</a>
                            <a href="{{ path('app_deck_manager', {'id': app.user.id})}}" class="hover:bg-gray-700 p-2 rounded">Mes Decks</a>
                            <a href="{{ path('chatting') }}" class="hover:bg-gray-700 p-2 rounded">Messagerie</a>
                            <a href="{{ path('app_profile_self') }}" class="hover:bg-gray-700 p-2 rounded">Mon profil</a>
                            <a href="{{ path('app_logout') }}" class="hover:bg-gray-700 p-2 rounded">Se déconnecter</a>
                        {% else %}
                            <a href="{{ path('app_login') }}" class="hover:bg-gray-700 p-2 rounded">Se connecter</a>
                            <a href="{{ path('app_register') }}" class="hover:bg-gray-700 p-2 rounded">S'inscrire</a>
                        {% endif %}
                    </div>
        
                </div>
            </nav>
        </div>

        
{% if app.user %}
    {% if app.user.globalChat is same as true %}
        {% set user_messages = user_messages() %}

        {% if app.user.modernChat is same as null or app.user.modernChat is same as false %}
    

            {% if user_messages.messages is empty or user_messages.messages is same as null %}
        <div class="fixed right-4 bottom-12 z-50 space-y-4 mt-4">
            {% else %}
            
            <div class="fixed right-4 bottom-12 z-50 space-y-4 mt-4">
        
                <!-- Recent Conversations Section -->
                <div x-data="{ isOpen: false }"
                    class="p-4 rounded-lg hover:shadow-xl {{ unread_count() > 0 ? 'bg-red-700 text-white relative hover:bg-blue-100 hover:text-red-700' : 'border bg-white hover:bg-blue-100 text-gray-800' }}">
                    <h2 @click="isOpen = !isOpen" class="text-sm font-semibold text-center cursor-pointer flex items-center justify-between">
                        Conversations récentes
                        <span x-text="isOpen ? '▲' : '▼'" class="ml-2"></span> <!-- Toggle arrow -->
                    </h2>
                    
                    {% if unread_count() > 0 %}
                    <span class="italic text-xs absolute top-1 left-4">
                        Vous avez {{ unread_count() }} message{{ unread_count() > 1 ? 's' : '' }} non-lu{{ unread_count() > 1 ? 's' : '' }}
                    </span>
                    {% endif %}
            
                    <ul class="bg-white text-gray-800 rounded-lg mt-1 max-h-60 overflow-y-auto" x-show="isOpen" x-transition>
                        {% for message in user_messages.messages %}
                            <li class="border-b border-gray-300 hover:bg-gray-100 px-2">
                                {% if message.authorId == app.user.id %}
                                    <!-- Current user is the author, so show the receiver -->
                                    <form action="{{ path('chatting') }}" method="POST">
                                        <input type="hidden" value="{{ message.receiverId }}" id="otherUserId" name="otherUserId">
                                        <input type="submit" class="text-sm px-2 py-1 hover:text-red-700 hover:underline cursor-pointer" value="{{ message.receiverName }}">
                                    </form>
                                {% else %}
                                    <!-- Current user is the receiver, so show the author -->
                                    <form action="{{ path('chatting') }}" method="POST">
                                        <input type="hidden" value="{{ message.authorId }}" id="otherUserId" name="otherUserId">
                                        <input type="submit" class="text-sm px-2 py-1 hover:text-red-700 hover:underline cursor-pointer" value="{{ message.authorName }}">
                                        {% if not message.isRead %}
                                            <span class="italic text-red-500 text-xs pl-2">vous a écrit</span>
                                        {% endif %}
                                    </form>
                                {% endif %}
                            </li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}

            {% if app.user.followingUsers is empty %}
            <div x-data="{ isOpen: false }" class="border hover:bg-blue-100 p-4 rounded-lg hover:shadow-xl bg-white">
                <a href="{{path('chatting')}}" class="text-sm font-semibold text-center cursor-pointer flex items-center justify-between">
                    Accéder au Chat
                </a>

                {% else %}
            <div x-data="{ isOpen: false }" class="border hover:bg-blue-100 p-4 rounded-lg hover:shadow-xl bg-white">
                {% if app.user.followingUsers is not empty %}
                    <h2 @click="isOpen = !isOpen" class="text-sm font-semibold text-center cursor-pointer flex items-center justify-between">
                        Ecrire à un contact<span x-text="isOpen ? '▲' : '▼'" class="ml-2"></span> <!-- Toggle arrow -->
                    </h2>
                {% endif %}
                <ul id="list" class="bg-white text-gray-800 rounded-lg mt-1 max-h-60 overflow-y-auto" x-show="isOpen" x-transition>

                    <input class="text-sm rounded text-center w-full border p-1 m-1 focus:outline-none" type="text" id="firstSearchBar" placeholder="Filtrer par nom" onkeyup="filterUsers()"/>
                    {% for user in app.user.followingUsers %}
                        <li class=" border-red-800 hover:bg-slate-100">
                            <form action="{{ path('chatting') }}" class="userform border-b" method="POST">
                                <input type="hidden" value="{{ user.id }}" id="otherUserId" name="otherUserId">
                                <input type="submit" class="text-sm px-4 py-1 hover:text-red-600 hover:underline" value="{{ user.userName }}">
                            </form>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
        </div>

            </div>
        </section>
    {% elseif app.user.modernChat is same as true %}
        
    <div class="fixed right-4 bottom-12 z-50 space-y-4 mt-4">
        {% if user_messages.messages is empty  %}
            
        {% else %}
        <!-- Recent Conversations Section -->
        <div x-data="{ isOpen: false }"
            class="p-4 rounded-lg hover:shadow-xl {{ unread_count() > 0 ? 'bg-red-700 text-white relative hover:bg-blue-100 hover:text-red-700' : 'bg-white border hover:bg-blue-100 text-gray-800' }}">
            <h2 @click="isOpen = !isOpen" class="text-sm font-semibold text-center cursor-pointer flex items-center justify-between">
                Conversations récentes
                <span x-text="isOpen ? '▲' : '▼'" class="ml-2 text-xs"></span> <!-- Toggle arrow -->
            </h2>
            
            {% if unread_count() > 0 %}
            <span class="italic text-xs absolute top-1 left-4">
                Vous avez {{ unread_count() }} message{{ unread_count() > 1 ? 's' : '' }} non-lu{{ unread_count() > 1 ? 's' : '' }}
            </span>
            {% endif %}

            
            <div x-show="isOpen" x-transition x-data="chatFormBis()">
                <ul class="bg-white text-gray-800 rounded-lg mt-1 max-h-60 overflow-y-auto">
                    {% for message in user_messages.messages %}
                        <li class="border-b border-gray-300 hover:bg-gray-100 px-2">
                            {% if message.authorId == app.user.id %}
                            <!-- Current user is the author, so show the receiver -->
                            <div>
                                <form @submit.prevent="submitChatForm($event)" action="{{ path('chat_form') }}" method="POST">
                                    <input type="hidden" value="{{ message.receiverId }}" id="otherUserId" name="otherUserId">
                                    <input type="submit" class="text-sm px-2 py-1 hover:text-red-700 hover:underline cursor-pointer" value="{{ message.receiverName }}">
                                </form>
                            </div>
                            {% else %}
                            <!-- Current user is the receiver, so show the author -->
                            <div>
                                <form @submit.prevent="submitChatForm($event)" action="{{ path('chat_form') }}" method="POST">
                                    <input type="hidden" value="{{ message.authorId }}" id="otherUserId" name="otherUserId">
                                    <input type="submit" class="text-sm px-2 py-1 hover:text-red-700 hover:underline cursor-pointer" value="{{ message.authorName }}">
                                    {% if not message.isRead %}
                                        <span class="italic text-red-500 text-xs pl-2">vous a écrit</span>
                                    {% endif %}
                                </form>
                            </div>
                            {% endif %}
                        </li>
                    {% endfor %}
                </ul>

                <!-- Messages Box -->
                <div x-show="showMessages" x-transition @click.outside="showMessages = false" class="fixed inset-0 flex items-center justify-center">
                    <div class="relative bg-white shadow-lg rounded-lg p-6 w-[500px] h-[50vh] max-h-[70vh] overflow-y-auto">
                        <button @click="showMessages = false" class="sticky top-0 right-0 text-red-800 hover:text-white bg-white hover:bg-red-800 rounded-md px-4 py-2 transition duration-300">
                            X
                        </button>
                        <h2 class="text-xl mb-4 text-center text-white bg-red-800 rounded-md px-4 py-2">
                            Messages
                        </h2>

                        <div id="messages-container-bis" class="overflow-y-auto flex flex-col border border-gray-200 rounded-lg p-4 mb-2 ">
                            <!-- Messages will be dynamically inserted here -->
                        </div>
                        <div class="flex flex-wrap relative">
                            <form @submit.prevent="submitNewMessage($event)" class="flex items-center">
                                <input id="receiverUserIdBis" type="hidden" name="receiverUserId">
                                <input type="text" name="messageContent" placeholder="Votre message" class="border border-gray-300 rounded-lg p-2 flex-1 mr-2">
                                <input type="submit" value="Send" class="bg-white border border-red-800 text-red-800 rounded-lg px-4 py-2 hover:text-white hover:bg-red-800 transition duration-300 cursor-pointer">
                            </form>
                        </div>
                    </div>
                </div>
            
            </div>
        </div>
        {% endif %}
        {% if app.user.followingUsers is empty %}
        <div x-data="{ isOpen: false }" class="hover:bg-blue-100 p-4 rounded-lg hover:shadow-xl bg-white border">

                    <h2 @click="isOpen = !isOpen" class="text-sm font-semibold text-center cursor-pointer flex items-center justify-between">
                        <a href="{{path('chatting')}}">
                            Accéder au Chat
                        </a>
                    </h2>

        {% else %}
            <!-- Start a Conversation Section -->
            <div x-data="{ isOpen: false }" class="border hover:bg-blue-100 p-4 rounded-lg hover:shadow-xl bg-white">

                    <h2 @click="isOpen = !isOpen" class="text-sm font-semibold text-center cursor-pointer flex items-center justify-between">
                        Ecrire à un contact
                        <span x-text="isOpen ? '▲' : '▼'" class="ml-2 text-xs"></span> <!-- Toggle arrow -->
                    </h2>


            <div x-show="isOpen" x-data="chatForm()">

                <input class="text-sm rounded text-center w-full border p-1 focus:outline-none" type="text" id="secondSearchBar" placeholder="Filtrer par nom" onkeyup="filterUsers()"/>
                <!-- List of users to start a conversation -->
                <ul id="list" class="bg-white text-gray-800 rounded-lg mt-2 max-h-60 overflow-y-auto">
                    {% for user in app.user.followingUsers %}
                        <li class="border-gray-300 hover:bg-gray-100 px-2">
                            <form @submit.prevent="submitChatForm($event)" action="{{ path('chat_form') }}" class="userform border-b" method="POST">
                                <input type="hidden" value="{{ user.id }}" name="otherUserId">
                                <input type="submit" class="text-sm px-2 py-1 hover:text-red-700 hover:underline cursor-pointer" value="{{ user.userName }}">
                            </form>
                        </li>
                    {% endfor %}
                </ul>
            
                <!-- Messages Box -->
                <div x-show="showMessages" x-transition @click.outside="showMessages = false" class="fixed inset-0 flex items-center justify-center">
                    <div class="relative bg-white shadow-lg rounded-lg p-6 w-[500px] h-[50vh] max-h-[70vh] overflow-y-auto">
                        <button @click="showMessages = false" class="sticky top-0 right-0 text-red-800 hover:text-white bg-white hover:bg-red-800 rounded-md px-4 py-2 transition duration-300">
                            X
                        </button>
                        <h2 class="text-xl mb-4 text-center text-white bg-red-800 rounded-md px-4 py-2">
                            Messages
                        </h2>

                        <div id="messages-container" class="overflow-y-auto flex flex-col border border-gray-200 rounded-lg p-4 mb-2 ">
                            <!-- Messages will be dynamically inserted here -->
                        </div>
                        <div class="flex flex-wrap relative">
                            <form @submit.prevent="submitNewMessage($event)" class="flex items-center">
                                <input id="receiverUserId" type="hidden" name="receiverUserId">
                                <input type="text" name="messageContent" placeholder="Write a message" class="border border-gray-300 rounded-lg p-2 flex-1 mr-2">
                                <input type="submit" value="Send" class="bg-white border border-red-800 text-red-800 rounded-lg px-4 py-2 hover:text-white hover:bg-red-800 transition duration-300 cursor-pointer">
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        {% endif %}

            </div>

        </div>
        </section>

        {% endif %}

    <script>
            document.addEventListener('alpine:init', () => {
                Alpine.data('chatBox', () => ({
                    init() {
                        // Scroll to the bottom of the chat box when the component is initialized
                        this.scrollToBottom();
                    },
                    
                    scrollToBottom() {
                        const messagesContainer = document.getElementById('messages-container');
                        if (messagesContainer) {
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        }
                    }
                }));
            });

            function chatForm() {
                return {
                    showMessages: false,
                    
                    // Function to handle the form submission
                    submitChatForm(event) {
                        event.preventDefault(); // Prevent default form submission
                        const form = event.target;
                        const formData = new FormData(form);
                        const messagesContainer = document.getElementById('messages-container');
            
                        fetch(form.action, {
                            method: 'POST',
                            body: formData,
                        })
                        .then(response => response.json())
                        .then(data => {
                            // Clear previous messages
                            messagesContainer.innerHTML = '';

                            let receiverUserId = document.getElementById('receiverUserId');
                            receiverUserId.value = data['otherUserId'];

                            // Append new messages
                            data.messages.forEach(message => {
                                const messageDiv = document.createElement('div');
                                
                                messageDiv.innerHTML = `
                                <div class="message-container flex w-full  ${message.author === '{{ app.user.username }}'  ? 'justify-end text-end' : 'justify-start'}">
                                    <div class="message-content max-w-full px-2 py-1 rounded-lg ${message.author === '{{ app.user.username }}' ? 'bg-gray-100 text-end' : 'bg-blue-100'}">
                                        <strong class="text-xs text-slate-700">
                                            ${message.author}:
                                        </strong><span class="text-xs italic text-gray-800">${message.createdAt}</span><br>
                                        <p class="text-gray-800 rounded-md px-2 text-sm">${message.content}</p>
                                    </div>
                                </div>
                            `;

                                //messageDiv.textContent = `${message.author}: ${message.content}`;
                                //messageDiv.classList.add('p-2', 'rounded-lg');
                                messagesContainer.appendChild(messageDiv);
                            });
            
                            // Show the message box
                            this.showMessages = true;
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        })
                        .catch(error => console.error('Error:', error));
                    },

                    submitNewMessage(event) {
                    event.preventDefault(); // Prevent the form from submitting the normal way
        
                    const form = event.target;
                    const formData = new FormData(form);
                    const messagesContainer = document.getElementById('messages-container');
        
                    // Retrieve form values
                    const messageContent = formData.get('messageContent');
                    const otherUserId = formData.get('receiverUserId');
                    console.log(otherUserId);
                    // Check if both fields are present
                    if (!messageContent || !otherUserId) {
                        console.error('Missing required fields');
                        return;
                    }
        
                    // Send AJAX request
                    fetch('/chatting/ajax', {
                        method: 'POST',
                        body: JSON.stringify({
                            messageContent: messageContent,
                            otherUserId: otherUserId
                        }),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            // Create a new message element and append it to the messages container
                            const messageDiv = document.createElement('div');
                            messageDiv.innerHTML = `
                            <div class="message-container flex w-full  ${data.message.author === '{{ app.user.username }}'  ? 'justify-end text-end' : 'justify-start'}">
                            <div class="message-content max-w-full px-2 py-1 rounded-lg ${data.message.author === '{{ app.user.username }}' ? 'bg-gray-100 text-end' : 'bg-blue-100'}">
                                <strong class="text-xs text-slate-700">
                                    ${data.message.author}:
                                </strong><span class="text-xs italic text-gray-800">${data.message.createdAt}</span><br>
                                <p class="text-gray-800 rounded-md px-2 text-sm">${data.message.content}</p>
                            </div>
                        </div>
                              
                            `;
                            messagesContainer.appendChild(messageDiv);
        
                            // Optionally scroll to the bottom
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
                            // Clear the input field
                            form.querySelector('input[name="messageContent"]').value = '';
                        } else {
                            console.error('Error:', data.message);
                        }
                    })
                    .catch(error => console.error('Error:', error));
                }
                };
            }




            function chatFormBis() {
        return {
            showMessages: false,
            
            // Function to handle the form submission
            submitChatForm(event) {
                event.preventDefault(); // Prevent default form submission
                const form = event.target;
                const formData = new FormData(form);
                const messagesContainerBis = document.getElementById('messages-container-bis');
    
                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                })
                .then(response => response.json())
                .then(data => {
                    // Clear previous messages
                    messagesContainerBis.innerHTML = '';

                    let receiverUserIdBis = document.getElementById('receiverUserIdBis');
                    receiverUserIdBis.value = data['otherUserId'];
    
                    // Append new messages
                    data.messages.forEach(message => {
                        const messageDiv = document.createElement('div');
                        
                        messageDiv.innerHTML = `
                        <div class="message-container flex w-full  ${message.author === '{{ app.user.username }}'  ? 'justify-end text-end' : 'justify-start'}">
                            <div class="message-content max-w-full px-2 py-1 rounded-lg ${message.author === '{{ app.user.username }}' ? 'bg-gray-100 text-end' : 'bg-blue-100'}">
                                <strong class="text-xs text-slate-700">
                                    ${message.author}:
                                </strong><span class="text-xs italic text-gray-800">${message.createdAt}</span><br>
                                <p class="text-gray-800 rounded-md px-2 text-sm">${message.content}</p>
                            </div>
                        </div>
                    `;

                        //messageDiv.textContent = `${message.author}: ${message.content}`;
                        //messageDiv.classList.add('p-2', 'rounded-lg', 'mb-2');
                        messagesContainerBis.appendChild(messageDiv);
                    });
    
                    // Show the message box
                    this.showMessages = true;
                })
                .catch(error => console.error('Error:', error));
            },


            submitNewMessage(event) {
                event.preventDefault(); // Prevent the form from submitting the normal way

                const form = event.target;
                const formData = new FormData(form);
                const messagesContainerBis = document.getElementById('messages-container-bis');

                // Retrieve form values
                const messageContent = formData.get('messageContent');
                const otherUserId = formData.get('receiverUserId');

                // Check if both fields are present
                if (!messageContent || !otherUserId) {
                    console.error('Missing required fields');
                    return;
                }

                // Send AJAX request
                fetch('/chatting/ajax', {
                    method: 'POST',
                    body: JSON.stringify({
                        messageContent: messageContent,
                        otherUserId: otherUserId
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        // Create a new message element and append it to the messages container
                        const messageDiv = document.createElement('div');
                        messageDiv.innerHTML = `
                             <div class="message-container flex w-full  ${data.message.author === '{{ app.user.username }}'  ? 'justify-end text-end' : 'justify-start'}">
                            <div class="message-content max-w-full px-2 py-1 rounded-lg ${data.message.author === '{{ app.user.username }}' ? 'bg-gray-100 text-end' : 'bg-blue-100'}">
                                <strong class="text-xs text-slate-700">
                                    ${data.message.author}:
                                </strong><span class="text-xs italic text-gray-800">${data.message.createdAt}</span><br>
                                <p class="text-gray-800 rounded-md px-2 text-sm">${data.message.content}</p>
                            </div>
                        </div>
                        `;
                        messagesContainerBis.appendChild(messageDiv);

                        // Optionally scroll to the bottom
                        messagesContainerBis.scrollTop = messagesContainerBis.scrollHeight;

                        // Clear the input field
                        form.querySelector('input[name="messageContent"]').value = '';
                    } else {
                        console.error('Error:', data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        };
    }

        function filterUsers() {
            // Get the search query
            if(document.getElementById('firstSearchBar')) {
                var query = document.getElementById('firstSearchBar').value.toLowerCase();
            } else if(document.getElementById('secondSearchBar'))
                var query = document.getElementById('secondSearchBar').value.toLowerCase();
            // Get all the user forms
            var forms = document.querySelectorAll('.userform');
            
            forms.forEach(function(form) {
                // Get the input field with the user's name
                var input = form.querySelector('input[type="submit"]');
                var name = input.value.toLowerCase();
                
                // Check if the name contains the search query
                if (name.includes(query)) {
                    form.style.display = 'block';  // Show the form if it matches
                } else {
                    form.style.display = 'none';   // Hide the form if it doesn't match
                }
            });
        }



    </script>


{% endif %}
{% endif %}

          {% block body %}{% endblock %}


          <footer class="text-white w-full bg-opacity-50 bg-black text-xs p-4 averia-serif-libre-light"> <!-- fixed bottom-0-->
            <div class="w-4/5 mx-auto text-center space-y-1">
                <!-- Liens du footer -->
                <div class="flex justify-center space-x-4">
                    <a href="/contact" class="hover:text-gray-400">Contact</a>
                    <span> | </span>
                    <a href="/terms" class="hover:text-gray-400">Termes et confidentialité</a>
                    <span> | </span>
                    <p class="text-xs">&copy; 2024 Magic-Hub</p>
                </div>

                <!-- Message de non-responsabilité -->
                <div class="w-full flex justify-center">
                    <p class="text-xs w-4/5">
                        Magic: The Gathering est une marque déposée de Wizards of the Coast. Ce site n'est pas affilié à Wizards of the Coast ni à Hasbro.<br> Tous les droits liés à Magic: The Gathering appartiennent à leurs propriétaires respectifs.
                    </p>
                </div>
            </div>
        </footer>

        <script>
            window.addEventListener('scroll', function() {
                const navbar = document.getElementById('navbar');
                if (window.scrollY > 50) {  // Change the threshold as per your needs
                    navbar.classList.add('bg-purple-opacity', 'shadow-lg');
                } else {
                    navbar.classList.remove('bg-purple-opacity', 'shadow-lg');
                }
            });

            //const bentoIcon = document.getElementById('bento-icon');
            //const bentoMenu = document.getElementById('bento-menu');
        
            //bentoIcon.addEventListener('click', () => {
                // Toggle the visibility of the bento menu
             //   console.log('clic')
             //   bentoMenu.classList.toggle('hidden');
          //  });   
        </script>
    </body>
</html>
