{% extends 'base.html.twig' %}

{% block title %}Cartes du set{% endblock %}

{% block body %}

<main class='min-h-screen bg-gradient-purple'>
    <div class="flex flex-col flex-wrap w-full items-center justify-end space-y-6 pt-20">

        <div class="inline-flex space-x-8 w-full justify-center items-center averia-serif-libre-light">
            <div class="flex w-72 opacity-70">
                <img class=" rounded-xl" id="placeholder1" style="mask-image: linear-gradient(to top, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%), 
                linear-gradient(to bottom, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%), 
                linear-gradient(to left, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%), 
                linear-gradient(to right, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%);
mask-composite: intersect;">
            </div>

            <div class="space-y-2 border border-white p-4 rounded">
                <a href="{{ path('all_sets') }}" class="text-white hover:underline text-sm">> Revenir à la liste des extensions</a>

                <h1 class="px-6 text-3xl font-medium text-white w-prose"> Set > <span id="setName" class="font-medium text-4xl"></span></h1>
                <p class="px-6 text-white text-sm">Date de sortie : <span id="releaseDate"></span></p>
                <p class="px-6 text-white text-sm"><span id="totalCards"></span> cartes</p>
                <div class="w-full text-center">
                    <a class="text-xs text-white hover:underline rounded-md" id="setSearch">( Chercher par nom de carte) </a>
                </div>
            </div>
            <div class="flex w-72 opacity-70">
                <img class=" rounded-xl" id="placeholder2" style="mask-image: linear-gradient(to top, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%), 
                linear-gradient(to bottom, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%), 
                linear-gradient(to left, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%), 
                linear-gradient(to right, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 1) 25%);
mask-composite: intersect;">
            </div>
        </div>
    </div>



    <div class="bg-gradient-purple">
        
        <div id="filters" class="bg-gradient-purple flex space-x-8 justify-center items-center px-4 pb-6 pt-20 sticky top-0 z-10">

            {% set active = 'text-sm bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 shadow-md cursor-pointer hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300' %}
            {% set inactive = 'text-sm bg-white text-red-700 px-4 py-2 rounded hover:bg-red-900 hover:text-white shadow-md cursor-pointer hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300' %}

            <div class="inline-flex space-x-4 items-center">
                <div id="rarityAll" class="{{ active }}">Toutes</div>
                <div id="rarityMythic" class="{{ inactive }}">Mythiques</div>
                <div id="rarityRare" class="{{ inactive }}">Rares</div>
                <div id="rarityUncommon" class="{{ inactive }}">Non communes</div>
                <div id="rarityCommon" class="{{ inactive }}">Communes</div>
            </div>

            <div class="flex flex-col space-y-4">
                <select id="typeSelect" class="border border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:bg-gray-100 h-10 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                    <option value="">Tous les types</option>
                    <option value="legendary">Légendaire</option>
                    <option value="creature">Creature</option>
                    <option value="artifact">Artefact</option>
                    <option value="enchantment">Enchantement</option>
                    <option value="battle">Bataille</option>
                    <option value="instant">Ephémère</option>
                    <option value="sorcery">Rituel</option>
                    <option value="land">Terrain</option>
                    <option value="planeswalker">Planeswalker</option>
                    <option value="saga">Saga</option>
                </select>

                <select id="subtypeSelect" class="border border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:bg-gray-100 h-10 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                    <option value="">Tous les sous-types</option>
                    <!-- Options will be dynamically populated -->
                </select>
            </div>

            <div class="border bg-white px-4 py-2 border-red-700 rounded hover:bg-gray-100 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                <div class="px-2 space-x-2">
                    <label class="text-sm italic ">
                        <input name="color" type="radio" checked value="c:" id="colorOnly">
                        Incluant seulement
                    </label>
                    <label class="text-sm italic ">
                        <input name="color" type="radio" value="ci:" id="colorIncluding">
                        Incluant séparément
                    </label>
                </div>
                <div id="colorSelect" class="flex flex-wrap justify-center space-x-3 py-2 bg-white">
                    <label><input type="checkbox" value="W"><img class="w-5" src="/icons/mana/W.webp"></label>
                    <label><input type="checkbox" value="R"><img class="w-5" src="/icons/mana/R.webp"></label>
                    <label><input type="checkbox" value="G"><img class="w-5" src="/icons/mana/G.webp"></label>
                    <label><input type="checkbox" value="B"><img class="w-5" src="/icons/mana/B.webp"></label>
                    <label><input type="checkbox" value="U"><img class="w-5" src="/icons/mana/U.webp"></label>
                    <label><input id="colorless" type="checkbox" value="C"><img class="w-5" src="https://svgs.scryfall.io/card-symbols/C.svg" alt="Colorless Mana Symbol"></label>               
                </div>
            </div>
            
            <div class=" bg-white border flex flex-col items-center border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:bg-gray-100 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                <label for="cmcSelect">Filtrer par coût de mana :</label>
                <select id="cmcSelect" class="text-sm rounded focus:ring-2 focus:outline-none outline-none text-center px-2 space-y-1">
                    <option class="italic" value="">Aucun filtre</option>
                    <option value="0">0</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                    <option value="13">13</option>
                    <option value="14">14</option>
                    <option value="15">15</option>
                    <option value="16">16</option>
                    <option value="17">17</option>
                    <option value="18">18</option>
                    <option value="20">20</option>
                </select>
            </div>

            <button id="resetButton" class="h-10 bg-red-700 text-white px-4 py-2 rounded hover:bg-red-900 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300 text-sm">Réinitialiser les filtres</button>
        </div>

        <div id="cardBoard" class="w-full flex justify-center">
            <div id="cardList" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5"></div> 
        </div>

        <!-- Placeholder for no cards found message -->
        <div id="noCardsMessage" class="hidden text-center text-red-500 font-semibold mt-4">
            Aucune carte trouvée avec les filtres sélectionnés.
        </div>
        
    </div>
</main>

<input type="hidden" value="{{ setCode }}" id="setCode">


<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('Page chargée et script exécuté!');

    const placeholder1 = document.getElementById("placeholder1");
    const placeholder2 = document.getElementById("placeholder2");

    function fetchFirstTwoCards() {
        // Fetch the first two cards to set their art-crop images
        fetch(`https://api.scryfall.com/cards/search?order=set&q=set:${setCode}&unique=prints`)
            .then(response => response.json())
            .then(data => {
                if (data.data && data.data.length >= 2) {
                    const card1 = data.data[0];
                    const card2 = data.data[1];

                    // Check if art-crop images are available and set them as the source
                    if (card1.image_uris && card1.image_uris['art_crop']) {
                        placeholder1.src = card1.image_uris['art_crop'];
                    }
                    if (card2.image_uris && card2.image_uris['art_crop']) {
                        placeholder2.src = card2.image_uris['art_crop'];
                    }
                }
            })
            .catch(error => console.error('Error fetching first two cards:', error));
    }

    function updateFetchUrl() {
        let query = `set:${setCode}`;

        // (Here you can keep all the filtering logic for the other cards)
        console.log(`Fetching URL: https://api.scryfall.com/cards/search?q=${query}`);
        return `https://api.scryfall.com/cards/search?include_extras=true&include_variations=true&order=set&unique=prints&q=${query}`;
    }

    const cardList = document.querySelector("#cardList");
    const setName = document.querySelector("#setName");
    const releaseDate = document.getElementById('releaseDate');
    const totalCards = document.getElementById('totalCards');
    const setCode = document.getElementById('setCode').value;
    const setSearch = document.getElementById('setSearch')

    const typeSelect = document.getElementById('typeSelect');
    const colorCheckboxes = document.querySelectorAll('#colorSelect input[type="checkbox"]');
    const subtypeSelect = document.getElementById('subtypeSelect');

    const colorOnly = document.getElementById('colorOnly');
    const colorIncluding = document.getElementById('colorIncluding');
    const colorless = document.getElementById('colorless');

    const cmcSelect = document.getElementById('cmcSelect');

    const resetButton = document.getElementById('resetButton');
    const noCardsMessage = document.getElementById('noCardsMessage');

    const rarityButtons = {
        all: document.getElementById('rarityAll'),
        mythic: document.getElementById('rarityMythic'),
        rare: document.getElementById('rarityRare'),
        uncommon: document.getElementById('rarityUncommon'),
        common: document.getElementById('rarityCommon')
    };

    let selectedRarity = '';

    function updateFetchUrl() {
        let type = typeSelect.value;
        let subtype = subtypeSelect.value;

        let selectedColors = Array.from(colorCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value)
            .join(',');

        let selectedCMC = cmcSelect.value;

        let query = `set:${setCode}`;

        if (type) {
            query += `+type:${type}`;
        }

        if (selectedColors) {
            if (colorless.checked) {
                query += `+-c:W+-c:U+-c:B+-c:R+-c:G`;
            } else if (colorOnly.checked) {
                query += `+color=${selectedColors}`;  // Exact color match
            } else if (colorIncluding.checked) {
                query += `+ci:${selectedColors}`; // Color inclusive
            }
        }

        if (subtype) {
            query += `+type:${subtype}`; 
        }

        if (selectedCMC) {
            query += `+cmc=${selectedCMC}`;
        }

        if (selectedRarity) {
            query += `+r:${selectedRarity}`;
        }

        console.log(`Fetching URL: https://api.scryfall.com/cards/search?q=${query}`);
        return `https://api.scryfall.com/cards/search?include_extras=true&include_variations=true&order=set&unique=prints&q=${query}`;
        
    }

    function fetchCards() {
        fetch(updateFetchUrl())
            .then(response => response.json())
            .then(data => {
                const myNode = document.getElementById("cardList");
                if (myNode) {
                    while (myNode.firstChild) {
                        myNode.removeChild(myNode.lastChild);
                    }
                }
    
                if (data.data && Array.isArray(data.data)) {
                    if (data.data.length > 0) {
                        setName.innerHTML = data.data[0].set_name;
                        releaseDate.innerHTML = data.data[0].released_at;
                        const setSearchUrl = "{{ path('app_search', {'search': 'set', 'parameter': 'PLACEHOLDER_SET'}) }}"
                        setSearch.href = `${setSearchUrl.replace('PLACEHOLDER_SET', encodeURIComponent(data.data[0].set))}`
    
                        // Set the total number of cards
                        totalCards.innerHTML = data.total_cards || data.data.length;
    
                        noCardsMessage.classList.add('hidden');  // Hide the no cards found message
    
                        data.data.forEach(card => {
                            let displayCard;
                            if (card.image_uris && card.image_uris.normal) {
                                displayCard = new Image(250, 350);
                                displayCard.src = card.image_uris.normal;
                                displayCard.id = card.id;
                                displayCard.classList.add('singleCard', 'p-2', 'transform',  'rounded-xl', 'shadow-xl', 'transition', 'duration-300', 'hover:scale-105');
                            } else if (card.card_faces[0]['image_uris'] && card.card_faces[0]['image_uris']['normal']) {
                                displayCard = new Image(250, 350);
                                displayCard.src = card.card_faces[0]['image_uris']['normal'];
                                displayCard.id = card.id;
                                displayCard.classList.add('singleCard', 'p-2');
                            }
    
                            var cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}";
                            let link = document.createElement("a");
                            let url = cardDetailUrl.replace('REPLACE_CARD_ID', card.id);
                            link.href = url;
    
                            link.appendChild(displayCard);
                            cardList.appendChild(link);
                        });
                    } else {
                        setName.innerHTML = "Set non trouvé";
                        noCardsMessage.classList.remove('hidden');  // Show the no cards found message
                    }
                } else {
                    console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                    noCardsMessage.classList.remove('hidden');  // Show the no cards found message on error
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                noCardsMessage.classList.remove('hidden');  // Show the no cards found message on error
            });
    }

    function fetchSubtypes() {
        fetch(`https://api.scryfall.com/cards/search?q=set:${setCode}`)
            .then(response => response.json())
            .then(data => {
                const subtypes = new Set();
                data.data.forEach(card => {
                    if (card.type_line.includes('—')) {
                        const parts = card.type_line.split('—');
                        const subtypesArray = parts[1].trim().split(' ');
                        subtypesArray.forEach(subtype => subtypes.add(subtype));
                    }
                });

                subtypeSelect.innerHTML = '<option value="">Tous les sous-types</option>';
                subtypes.forEach(subtype => {
                    const option = document.createElement('option');
                    option.value = subtype.toLowerCase();
                    option.textContent = subtype;
                    subtypeSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Erreur lors de la récupération des sous-types:', error));
    }

    function resetFilters() {
        typeSelect.value = "";
        colorCheckboxes.forEach(checkbox => checkbox.checked = false);
        subtypeSelect.value = "";
        cmcSelect.value = "";
        colorOnly.checked = false;
        colorIncluding.checked = false;
        colorless.checked = false;
        selectedRarity = '';
        updateRarityButtons('all');
        fetchCards();
    }

    function updateRarityButtons(selected) {
        Object.keys(rarityButtons).forEach(key => {
            if (key === selected) {
                rarityButtons[key].className = '{{ active }}';
            } else {
                rarityButtons[key].className = '{{ inactive }}';
            }
        });
    }

    rarityButtons.all.addEventListener('click', function() {
        selectedRarity = '';
        updateRarityButtons('all');
        fetchCards();
    });

    rarityButtons.mythic.addEventListener('click', function() {
        selectedRarity = 'mythic';
        updateRarityButtons('mythic');
        fetchCards();
    });

    rarityButtons.rare.addEventListener('click', function() {
        selectedRarity = 'rare';
        updateRarityButtons('rare');
        fetchCards();
    });

    rarityButtons.uncommon.addEventListener('click', function() {
        selectedRarity = 'uncommon';
        updateRarityButtons('uncommon');
        fetchCards();
    });

    rarityButtons.common.addEventListener('click', function() {
        selectedRarity = 'common';
        updateRarityButtons('common');
        fetchCards();
    });

    typeSelect.addEventListener('change', fetchCards);
    colorCheckboxes.forEach(checkbox => checkbox.addEventListener('change', fetchCards));
    colorOnly.addEventListener('change', function() {
        if (colorOnly.checked) {
            colorIncluding.checked = false;
        }
        fetchCards();
    });
    colorIncluding.addEventListener('change', function() {
        if (colorIncluding.checked) {
            colorOnly.checked = false;
        }
        fetchCards();
    });
    colorless.addEventListener('change', fetchCards);
    subtypeSelect.addEventListener('change', fetchCards);
    cmcSelect.addEventListener('change', fetchCards);
    resetButton.addEventListener('click', resetFilters);

        // Fetch the first two cards for the placeholders
        fetchFirstTwoCards();

    fetchSubtypes();  // Load subtypes initially
    fetchCards();  // Load cards initially based on default values
});
</script>
{% endblock %}
