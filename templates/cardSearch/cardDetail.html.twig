{% extends 'base.html.twig' %}

{% block title %}Détail d'une carte{% endblock %}

{% block body %}

<input id="cardInput" type="hidden" value="{{ cardId }}">

<div class="h-screen flex flex-col align-items justify-center">
<div id="container" class="flex flex-wrap mt-10 justify-center items-center min-h-4/5 w-screen">

    <div class="bg-white flex flex-col items-center space-y-2 text-sm shadow duration-300 m-6 rounded pt-2">
        <h3 class="px-2 py-1 text-black border rounded">Versions de la carte</h3>
        <div id="printings" class="text-sm p-2 hidden max-h-[60vh] overflow-y-auto">
        </div>
    </div>


   <!--<div id="detailBoard" class="hover:shadow-[5px_5px_0px_0px_rgba(0,_0,_0,_0.5)] hover:border transition-all shadow-md ease-in-out duration-300 rounded-lg flex flex-wrap justify-center m-8 p-10 space-x-8">--> 
    <div  class=" rounded-md p-4">
        <div id="detailBoard" class="bg-white rounded-t-md flex flex-wrap justify-center p-6 space-x-8">
            <div id="placeholder" class="xl:w-96 lg:w-80 object-cover">
            </div>

            <div id="cardDetails" class="space-y-2">
                <div class=" mb-4">
                    <h1 id="name" class="font-bold p-1 text-lg"></h1>
                    <span id="manaCost" class="pb-2 w-full inline-flex"></span>
                </div>

                    <p id="typeLine" class="py-2 my-2 border-t border-b font-semibold"></p>
                    <p  class="text-sm py-4 pr-4">Rareté : <span id="rarity" class="py-4 pr-4 font-semibold"></span><p>

                <div id="oracleText" class="whitespace-pre-line w-96 border px-4 py-2">
                    <!-- Oracle text will be inserted here -->
                </div>
            </div>
        </div>

        <div class="bg-white flex flex-col items-center">
            <div>
                <p id="cardSet" class="border-t pt-4">
                    <!-- Card set and artist details will be inserted here -->
                </p>
                <p class="text-xs"><!--"scryfall_set_uri": "https://scryfall.com/sets/mm3?utm_source=api",--></p>
            </div>
            <div class="text-center">
                <p id="artistName" class="mt-2">
                    <!-- Artist name will be inserted here -->
                 </p>
                 <a id="artistSearch" href="">
                    <p class="text-sm italic hover:underline transition duration-300 mt-2">Voir les autres cartes dessinées par <span id="artistSpan" class="font-semibold"></span></p>
                </a>
            </div>
        </div>
        <div class="bg-white flex flex-col justify-center items-center p-4 rounded-b-md">
              <!-- Button to trigger the image download options -->
              <button id="download-button" class="text-xs p-2 rounded hover:underline">
                Télécharger la carte
            </button>
            
            <!-- Hidden div for image download links -->
            <div id="download-links" class="hidden mt-4">
                <p class="text-xs font-semibold">Choisir une taille à télécharger :</p>
                <ul id="image-sizes">
                <!-- Links will be added here dynamically -->
                </ul>
            </div>
        </div>

    
    </div>



    <div class="flex flex-col space-y-4">
        <div class="bg-white text-sm p-4 m-6 flex flex-col space-y-2 rounded">
            <a id="edhrec" href="#" target="_blank" class="hover:underline">Voir la carte sur <strong>EDHREC</strong></a>
            <a id="tappedOut" href="#" target="_blank" class="hover:underline">Voir la carte sur <strong>Tapped Out</strong></a>
            <a id="spellbook" href="#" target="_blank" class="hover:underline">Voir la carte sur <strong>Commander Spellbook</strong></a>
            <a id="tcgArticles" href="#" target="_blank" class="hover:underline">Voir les articles sur <strong>TGCPlayer Infinite</strong></a>
            <a id="mhDecks" href="#" target="_blank" class="hover:underline">Voir les decks sur <strong>MAGIC-HUB</strong></a>
        </div>


        <div class="bg-white flex flex-col text-center m-6  rounded">
            <h3 class="mt-2 mx-auto px-2 py-1 border text-black rounded text-sm">Légalité de la carte</h3>
            <div id="legalities" class="text-xs p-4 grid grid-cols-2 gap-y-3 gap-x-2 text-left rounded">
            </div>
        </div>

    </div>

</div>



<div class="flex justify-center w-screen">
    <div class="bg-white flex flex-col justif-center items-center p-4 space-y-1 m-6 rounded ml-8">
        <p class="py-2 border-t border-b">Rang EDHREC : <span id="edhrecRank" class="font-semibold"></span></p>
        <p class="text-sm">Prix normal : <span id="price" class="font-semibold"></span></p>
        <p class="text-sm">Prix Foil : <span id="priceFoil" class="font-semibold"></span></p>
        <p class="text-xs italic pb-2">(Attention, les prix sont donnés à titre indicatif et peuvent ne pas être en adéquation avec les sites marchands.)</p>
        <a id="cardmarketLink" class="my-4 text-xs gradient-adapt text-white p-1 rounded hover:bg-red-800 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300" href="#" target="_blank">Acheter la carte sur Cardmarket</a>
    </div>
</div>

<div class="w-full flex justify-center">
    <div id="otherPrints">

    </div>
</div>

</div>


<script>

document.addEventListener('DOMContentLoaded', function() {
    console.log('Page chargée et script exécuté!');

    const detailBoard = document.querySelector("#detailBoard");  
    // Find the element with the ID 'detailBoard' and store it in a variable for future use.
    
    let card = document.querySelector("#cardInput");  
    // Find the element where the card ID is input (with ID 'cardInput').

    if (card && detailBoard) {  
        // Check if both the card input element and the detail board exist in the DOM.
        let cardId = card.value;  
        // Get the value of the card input element (this is the card ID).

        // Function to fetch symbology data and create a map of symbol codes to SVG image elements
        function fetchSymbology() {
            return fetch('https://api.scryfall.com/symbology')  
            // Make a request to the Scryfall API to get the symbology data.
                .then((response) => response.json())  
                // Parse the API response as JSON.
                .then((data) => {  
                    // Once the data is parsed, execute this function.
                    const symbolMap = {};  
                    // Initialize an empty object that will map symbol codes to their corresponding SVG image elements.
                    
                    data.data.forEach((symbol) => {  
                        // Loop through each symbol object in the response data.
                        symbolMap[symbol.symbol] = `<img src="${symbol.svg_uri}" alt="${symbol.symbol}" class="w-6 inline-block px-1">`;  
                        // For each symbol, add a new entry to the symbolMap object.
                        // The key is the symbol code (like {W}, {U}), and the value is an HTML string that creates an <img> element
                        // The <img> element uses the SVG URI from the API as the source and includes relevant classes and alt text.
                    });
                    return symbolMap;  
                    // Return the filled symbolMap object so it can be used later in the code.
                })
                .catch((error) => {  
                    // If there is an error during the fetch or processing of data, this block will handle it.
                    console.error('Erreur lors de la récupération des symboles:', error);  
                    // Log the error to the console for debugging purposes.
                    return {};  
                    // Return an empty object if there's an error, so the script doesn't break.
                });
        }

        // Function to replace all symbols in a given text with corresponding image elements using the symbolMap
        function replaceSymbols(text, symbolMap) {
            return text.replace(/{[^}]+}/g, (match) => symbolMap[match] || match);  
            // This function takes a string 'text' and a 'symbolMap' object.
            // It uses a regular expression to find all instances of symbols in the text (e.g., {W}, {R}).
            // For each match, it looks up the corresponding image element in the symbolMap.
            // If a match is found, it replaces the symbol with the image element.
            // If no match is found (the symbol is not in the map), it leaves the symbol unchanged.
        }

        // Fetch the symbology data first, then use it to replace symbols in the card data
        fetchSymbology().then((symbolMap) => {  
            // Call the fetchSymbology function, which returns a promise that resolves to the symbolMap object.
            // Once the promise is resolved, the symbolMap is passed to the next function.

            /* symbolMap: This is an object where the keys are the symbols (like {W}, {U}) and the values are HTML strings that create <img> elements with the appropriate SVG URIs. This map allows for quick replacement of any symbol found in the card text.

            replaceSymbols(): This function takes a string of text and the symbolMap object. It searches the text for any symbols enclosed in curly braces {} and replaces them with the corresponding image HTML from symbolMap.

            Process Flow:

            The script first fetches the symbology data from Scryfall and constructs the symbolMap.
            Then, it fetches the card data.
            The card's text fields (like Oracle text and mana cost) are processed by replaceSymbols() to replace any symbols with their respective images before being inserted into the DOM.
            This structure makes the code both efficient and dynamic, as it retrieves the most up-to-date symbols directly from the Scryfall API.    */

            fetch('https://api.scryfall.com/cards/' + cardId)  
            // Récupérer la data de la carte en envoyant une requête http à l'API SCRYFALL
                .then((response) => response.json())  
                // Convertit la réponse API en JSON
                .then((data) => {  
                    // Once the card data is parsed, execute this function to update the UI.
                    // Select elements in the DOM to update with card data
                    let attributeName = document.getElementById("name");  
                    let attributeOracleText = document.getElementById("oracleText");  
                    let attributeManaCost = document.getElementById("manaCost");  
                    let attributeRarity = document.getElementById("rarity");  
                    let attributeTypeLine = document.getElementById("typeLine");  
                    let attributeCardSet = document.getElementById("cardSet");  
                    let attributeArtistName = document.getElementById("artistName");  
                    let cardmarketLink = document.getElementById("cardmarketLink");  
                    let placeholder = document.getElementById("placeholder");  
                    let artistName = document.getElementById('artistSpan');
                    let artistSearch = document.querySelector('#artistSearch')
                    let edhrec = document.getElementById('edhrec');
                    let spellbook = document.getElementById('spellbook');
                    let edhrecRank = document.getElementById('edhrecRank');
                    let price = document.getElementById('price')
                    let priceFoil = document.getElementById('priceFoil')
                    let tcgArticles = document.getElementById('tcgArticles')
                    let tappedOut = document.getElementById('tappedOut')
                    let legalities = document.getElementById('legalities')
                    //let  = document.getElementById('')


                    // Affichage de la carte
                    let displayCard = new Image(287.5, 402.5);  
                    displayCard.alt = `${data.name} illustré par ${data.artist}`
                    // Create a new Image element with specific dimensions for the card.
                    if (data.image_uris && data.image_uris.normal) {  
                        // Check if the card data includes an image URI for the normal resolution.
                        displayCard.src = data.image_uris.normal;  
                        displayCard.classList.add('w-full', 'h-auto', 'p-1', 'transform',  'rounded-xl', 'bg-white', 'shadow-xl', 'transition', 'duration-300', 'hover:scale-105');
                        // Set the source of the image to the normal image URI.
                    }
                    placeholder.appendChild(displayCard);  
                    // Append the image element to the placeholder in the DOM.

                    // Set the card name
                    attributeName.innerHTML = data.name;  
                    // Update the inner HTML of the 'name' element with the card's name.

                    // Format and display Oracle text with symbol replacements
                    let formattedOracleText = replaceSymbols(data.oracle_text, symbolMap)
                        // Use the replaceSymbols function to replace symbols in the Oracle text with images.
                        .split('\n')  
                        // Split the formatted text into paragraphs based on newline characters.
                        .map(paragraph => `<p class="py-2">${paragraph}</p>`)  
                        // Wrap each paragraph in <p> tags with padding for styling.
                        .join('');  
                        // Join the paragraphs back into a single string.

                    attributeOracleText.innerHTML = formattedOracleText;  
                    attributeManaCost.innerHTML = replaceSymbols(data.mana_cost, symbolMap);  
                    attributeTypeLine.innerHTML = data.type_line;  
                    attributeRarity.innerHTML = data.rarity.toUpperCase();
                    edhrecRank.innerHTML = data.edhrec_rank
                    
                    // Set the price and foil price
                    if (data.prices && data.prices.eur) {
                        price.innerHTML = `${data.prices.eur} €`;
                    } else {
                        price.innerHTML = '<span class="text-red-500 italic">Prix non disponible</span>';
                    }

                    if (data.prices && data.prices.eur_foil) {
                        priceFoil.innerHTML = `${data.prices.eur_foil} €`;
                    } else {
                        priceFoil.innerHTML = '<span class="text-red-500 italic">Prix non disponible</span>';
                    }


                    edhrec.href = data.related_uris.edhrec
                    tcgArticles.href = data.related_uris.tcgplayer_infinite_articles
                    spellbook.href = `https://commanderspellbook.com/search/?q=${encodeURIComponent(data.name)}`
                    tappedOut.href = `https://tappedout.net/search/?q=${encodeURIComponent(data.name)}`

                    displayDownloadLinks(data.image_uris)

                    if (data.legalities ) {
                        const legalityBoard = document.getElementById('legalities');
                        legalityBoard.innerHTML = ''; // Clear any existing content
                    
                        // Iterate over the object keys and values
                        for (const [format, legality] of Object.entries(data.legalities)) {
                            let legalityElement = document.createElement('p');
                    
                            if (legality === 'legal') {

                            legalityElement.innerHTML = `<span class="text-white p-1 mt-1 bg-green-500 border border-white rounded">${format.toUpperCase()}</span>`;
                            legalityBoard.appendChild(legalityElement);
                        } else {
                            legalityElement.innerHTML = `<span class="text-white p-1 mt-1 bg-red-700 border border-white rounded">${format.toUpperCase()}</span>`;
                            legalityBoard.appendChild(legalityElement);
                        }
                    }

                    if (data.prints_search_uri) {
                        fetchOtherPrintings(data.prints_search_uri);  // Fetch other printings and display
                    }
                } 

                // Prepare a base URL using Twig without dynamic parts
                /*Explanation:
                    Twig Part: The Twig path() function generates the base URL, which includes the show_set route, and we use 'PLACEHOLDER' as a dummy value in the setCode part.
                    JavaScript Part: We replace 'PLACEHOLDER' with the actual value of data.set using JavaScript's replace() method.
                    This approach ensures that:

                    Twig handles the server-side URL generation.
                    JavaScript dynamically injects the value from the fetched data. */

                const baseSetUrl = "{{ path('show_set', {'setCode': 'PLACEHOLDER'}) }}";
                attributeCardSet.innerHTML = `Extension : <a href="${baseSetUrl.replace('PLACEHOLDER', encodeURIComponent(data.set))}"><span class="font-semibold hover:underline">${data.set_name}</span></a>`;  
                
                attributeArtistName.innerHTML = `Illustration par : <span class="font-semibold hover:underline"><a href="https://www.google.fr/search?q=${data.artist}+mtg+artist" target="_blank">${data.artist}</a></span>`;
                artistName.innerHTML = data.artist; 

                const artistSearchUrl = "{{ path('app_search', {'search': 'artist', 'parameter': 'PLACEHOLDER_ARTIST_NAME'}) }}"
                artistSearch.href = `${artistSearchUrl.replace('PLACEHOLDER_ARTIST_NAME', encodeURIComponent(data.artist))}`
                // Set Cardmarket link
                cardmarketLink.href = `https://www.cardmarket.com/en/Magic/Products/Search?searchString=${encodeURIComponent(data.name)}`;  
                // Update the href attribute of the 'cardMarketLink' element to link to the card's page on Cardmarket.

                // Call function to display extensions
                //if (data.prints_search_uri) {
                //    displayOtherPrintings(data.prints_search_uri); // Display the list of extensions
                //}
            })
            .catch((error) => {  
                // If there is an error during the fetch or processing of the card data, this block will handle it.
                console.error('Erreur lors de la récupération des données de carte:', error);  
                // Log the error to the console for debugging purposes.
            });
        });
    }

    const downloadButton = document.getElementById('download-button');
    const downloadLinksDiv = document.getElementById('download-links');
    const imageSizesList = document.getElementById('image-sizes');
    // Function to display download links
    function displayDownloadLinks(imageUris) {
        // Clear existing content
        imageSizesList.innerHTML = '';

        // Sizes provided by Scryfall API (small, normal, large, png, art_crop, border_crop)
        const sizes = {
            small: 'Small',
            normal: 'Normal',
            large: 'Large',
            png: 'High Resolution PNG',
            art_crop: 'Art Crop',
            border_crop: 'Border Crop'
        };

        // Add links for each available size
        for (const [size, label] of Object.entries(sizes)) {
            if (imageUris[size]) {
                const listItem = document.createElement('li');
                const link = document.createElement('a');
                link.href = imageUris[size];  // Image URL for the size
                link.innerText = `Télécharger ${label}`;
                link.classList.add('text-blue-500', 'hover:underline', 'text-xs');  // Tailwind classes for styling
                link.setAttribute('target', '_blank');  // Open link in new tab

                listItem.appendChild(link);
                imageSizesList.appendChild(listItem);
            }
        }
    }

    downloadButton.addEventListener('click', function() {

        // Show the div
        downloadLinksDiv.classList.toggle('hidden');
    })

    function fetchOtherPrintings(printsSearchUri) {
        fetch(printsSearchUri)
            .then((response) => response.json())
            .then((data) => {
                const printings = data.data;
                const box = document.querySelector('#printings'); // Boîte 1 container
    
                // Clear any previous content
                box.innerHTML = '';
    
                if (printings.length > 1) {
                    const ul = document.createElement('ul');
                    ul.classList.add('list-none');  // Tailwind for a clean list
    
                    printings.forEach((printing) => {
                        console.log(printing);
                        const li = document.createElement('li');
                        li.classList.add('hover:text-red-700', 'cursor-pointer', 'relative', 'text-sm', 'p-1', 'm-1', 'hover:underline');  // Add hover effect and cursor
    
                        // Fetch set details to get the icon_svg_uri
                        fetch(`https://api.scryfall.com/sets/${printing.set}`)
                            .then((setResponse) => setResponse.json())
                            .then((setData) => {
                                console.log(setData)
                                // Create set icon with fetched icon_svg_uri
                                const setIcon = document.createElement('img');
                                setIcon.src = setData.icon_svg_uri;  // Use the icon_svg_uri from the set data
                                setIcon.alt = printing.set_name;
                                setIcon.classList.add('w-5', 'h-5', 'mr-2', 'inline-flex');  // Tailwind classes for size and margin
    
                                // Create a container for the set details
                                const setDetails = document.createElement('div');
                                setDetails.classList.add('flex', 'items-center');
    
                                // Append the set icon to the set details container
                                setDetails.appendChild(setIcon);
    
                                // Add set name and card number
                                const setName = document.createElement('span');
                                setName.innerText = `${printing.set_name} (${setData.code.toUpperCase()}) #${printing.collector_number}`;
                                setName.classList.add('mr-2');  // Add some margin
                      
                                // Append set name and attributes to the set details container
                                setDetails.appendChild(setName);
    
                                // Append set details to the list item
                                li.appendChild(setDetails);
                            })
                            .catch((error) => {
                                console.error('Error fetching set details:', error);
                            });
    
                            li.addEventListener('mouseover', (e) => {
                                const imagePreview = document.createElement('img');
                                imagePreview.src = printing.image_uris.normal;  // Use normal image size
                                imagePreview.classList.add('absolute', 'w-72', 'border', 'shadow-lg', 'z-50');
                            
                                // Define the offset values
                                const offsetX = -20;  // Adjust this value to move the image to the left or right
                                const offsetY = 20;  // Adjust this value to move the image up or down
                            
                                // Set the position with offsets
                                imagePreview.style.top = `${e.pageY + offsetY}px`;
                                imagePreview.style.left = `${e.pageX - offsetX}px`;
                            
                                imagePreview.id = 'hoverImagePreview';
                                document.body.appendChild(imagePreview);
                            });
                            
                            li.addEventListener('mouseout', () => {
                                const imagePreview = document.getElementById('hoverImagePreview');
                                if (imagePreview) imagePreview.remove();  // Remove image on mouse out
                            });
    
                        // Redirect to the card detail page when clicked
                        li.addEventListener('click', () => {
                            const cardDetailUrl = `{{ path('app_card_detail', {'cardId': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', printing.id);
                            window.location.href = cardDetailUrl;  // Redirect to the card detail page
                        });
    
                        ul.appendChild(li);
                    });
    
                    box.classList.remove('hidden');
                    box.classList.add('flex', 'justify-center');
                    box.appendChild(ul);
                } else {
                    // Display message if no other printings exist
                    box.classList.remove('hidden');
                    box.classList.add('flex', 'justify-center');
                    box.innerHTML = '<p class="text-gray-700 italic">Cette carte n\'a pas d\'autres impressions.</p>';
                }
            })
            .catch((error) => {
                console.error('Error fetching other printings:', error);
            });
    }


});

</script>

{% endblock %}
