{% extends 'base.html.twig' %}

{% block title %}Search Cards{% endblock %}

{% block body %}

<main>
    <div class="gradient-adapt flex flex-col h-60 w-full items-center justify-end space-y-6 mb-6 p-10">
        <div class="space-y-2 border border-white p-4 rounded">

            <h1 class="px-6 text-3xl font-medium text-white w-prose">Recherche de cartes</h1>
            <p class="px-6 text-white italic text-sm">Utilisez les filtres ci-dessous pour affiner votre recherche.</p>
        </div>
    </div>

    <div class="flex space-x-8 justify-center items-center px-4 py-10 mt-8 mb-1 sticky top-8 z-10 bg-white">

        {% set active = 'text-sm bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 shadow-md cursor-pointer hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)]duration-300' %}
        {% set inactive = 'text-sm bg-white text-red-700 px-4 py-2 rounded hover:bg-red-900 hover:text-white shadow-md cursor-pointer hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300' %}

        <div class="flex flex-col space-y-4">
            <select id="typeSelect" class="border border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:bg-gray-100 h-10 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                <option value="">Tous les types</option>
                <option value="legendary">Légendaire</option>
                <option value="creature">Creature</option>
                <option value="artifact">Artefact</option>
                <option value="enchantment">Enchantement</option>
                <option value="battle">Bataille</option>
                <option value="instant">Ephémère</option>
                <option value="sorcery">Rituel</option>
                <option value="land">Terrain</option>
                <option value="planeswalker">Planeswalker</option>
                <option value="saga">Saga</option>
            </select>

            <select id="subtypeSelect" class="border border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:bg-gray-100 h-10 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                <option value="">Tous les sous-types</option>
                <!-- Options will be dynamically populated -->
            </select>
        </div>

        <div class="border px-4 py-2 border-red-700 rounded hover:bg-gray-100 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
            <div class="px-2 space-x-2">
                <label class="text-sm italic text-gray-700 hover:underline">
                    <input name="color" type="radio" checked value="c:" id="colorOnly">
                    Incluant exactement
                </label>
                <label class="text-sm italic text-gray-700 hover:underline">
                    <input name="color" type="radio" value="ci:" id="colorIncluding">
                    Incluant séparément
                </label>
            </div>
            <div id="colorSelect" class="flex flex-wrap justify-center space-x-4 py-2">
                <label><input type="checkbox" value="W"><img class="w-5" src="/icons/mana/W.webp"></label>
                <label><input type="checkbox" value="R"><img class="w-5" src="/icons/mana/R.webp"></label>
                <label><input type="checkbox" value="G"><img class="w-5" src="/icons/mana/G.webp"></label>
                <label><input type="checkbox" value="B"><img class="w-5" src="/icons/mana/B.webp"></label>
                <label><input type="checkbox" value="U"><img class="w-5" src="/icons/mana/U.webp"></label>
                <label><input id="colorless" type="checkbox" value="C"><img class="w-5" src="https://svgs.scryfall.io/card-symbols/C.svg" alt="Colorless Mana Symbol"></label>               
            </div>
        </div>
        <div class="flex flex-col space-y-4">
        
            <div class="border border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:bg-gray-100 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                <label for="cmcSelect">Filtrer par coût de mana :</label>
                <select id="cmcSelect" class="text-sm rounded focus:ring-2 focus:outline-none outline-none text-center px-2 space-y-1">
                    <option class="italic" value="">Aucun filtre</option>
                    <option value="0">0</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                    <option value="13">13</option>
                    <option value="14">14</option>
                    <option value="15">15</option>
                    <option value="16">16</option>
                    <option value="17">17</option>
                    <option value="18">18</option>
                    <option value="20">20</option>
                </select>
            </div>
            <div class="flex flex-col">
                <label class="text-sm">Set / Extension <span class="text-xs italic"> exemple : fdn</span></label>
                <input id="setSearch" type="text" class="border border-red-700 text-sm rounded px-4 py-2 focus:ring-2 focus:outline-none outline-none hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300"
                {% if searchToken is same as 'set' %}
                    value="{{ searchParameter }}"    
                {% endif %}
                >
            </div>
        </div>

        <div class="flex flex-col flex-wrap">
            <label class="text-sm hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 px-4 py-2 rounded-lg">
                <input id='artistSearch' type="checkbox"
                {% if searchToken is same as 'artist' %}
                    checked
                {% endif %}
                > Recherche par nom d'artiste
            </label>
            <label class="text-sm hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 px-4 py-2 rounded-lg">
                <input id='uniquePrints' type="checkbox">
                Afficher toutes les versions des cartes
            </label>
            <label class="text-sm hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 px-4 py-2 rounded-lg">
                <input id='includeExtras' type="checkbox">
                Inclure les Extras (jetons, plans...)
            </label>
        </div>
        <div class="flex flex-col items-center justify-center space-y-4">
            <button id="hideFilters" class="h-10 border border-bg-red-400 text-red-700 hover:bg-red-800 hover:text-white hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 px-4 py-2 rounded shadow-md text-sm">Masquer les filtres</button>
            <button id="reinitializeButton" class="h-10 border border-bg-red-400 text-red-700 hover:bg-red-800 hover:text-white hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 px-4 py-2 rounded shadow-md text-sm">Réinitialiser les filtres</button>
        </div>                              class="h-10 bg-red-700 text-white px-4 py-2 rounded hover:bg-red-900 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300 text-sm"
    </div>

    <div class="inline-flex justify-center space-x-3 w-full p-2 m-4 sticky top-48 bg-white z-10">
        <input type="text" id="searchInput" class="border border-red-700 text-sm rounded px-4 py-2 w-96 focus:ring-2 focus:outline-none outline-none hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300" 
        {% if searchToken is same as 'artist' %}
            value="{{ searchParameter }}"
        {% endif %}  
        placeholder="Entrez un terme de recherche...">

        <img id="eraser" class="w-10 border rounded hover:border-red-800 transition duration-300 hover:shadow-md" src="https://img.icons8.com/carbon-copy/100/erase.png" alt="eraser to clear text"/>
        <button id="searchStart" class="h-10 bg-white text-red-700 px-4 py-2 rounded hover:bg-red-800 hover:text-white hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] border border-red-700 duration-300 text-sm">Rechercher</button>
        <button id="resetSearch" class="h-10 px-4 py-2 text-xs rounded bg-white border-red-700 text-red-700 hover:bg-red-800 hover:text-white hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300">RESET</button>
    </div>

    <div id="count" class="flex justify-center m-4 hidden">
        <p class="text-grey-600 italic text-xs"><span id="totalCards"></span> cartes trouvées</p>
    </div>

    <div class="flex justify-center w-full">
        <div class="flex flex-col flex-wrap max-w-4/5 w-4/5 px-10">
            <div class="inline-flex space-x-4 pl-16 mb-8 sticky top-48 z-20">
                <div id="rarityAll" class="{{ active }}">Toutes</div>
                <div id="rarityMythic" class="{{ inactive }}">Mythiques</div>
                <div id="rarityRare" class="{{ inactive }}">Rares</div>
                <div id="rarityUncommon" class="{{ inactive }}">Non communes</div>
                <div id="rarityCommon" class="{{ inactive }}">Communes</div>
            </div>
        

            <div id="cardBoard" class="w-full flex justify-center">
                <div id="cardList" class="flex flex-wrap justify-center"></div>
            </div>
        </div>
    </div>

    <!-- Placeholder for no cards found message -->
    <div id="noCardsMessage" class="hidden text-center text-red-500 mt-4">
        Aucune carte trouvée avec les filtres sélectionnés.
    </div>
</main>

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('Page chargée et script exécuté!');

    const cardList = document.querySelector("#cardList");
    const searchInput = document.getElementById('searchInput');
    const count = document.getElementById('count');

    const eraser = document.getElementById('eraser');
    
    // Add a click event listener to the eraser
    eraser.addEventListener('click', () => {
        // Clear the input field's value when the eraser is clicked
        searchInput.value = '';
    });

    const typeSelect = document.getElementById('typeSelect');
    const colorCheckboxes = document.querySelectorAll('#colorSelect input[type="checkbox"]');
    const subtypeSelect = document.getElementById('subtypeSelect');
    const artistSearch = document.getElementById('artistSearch')
    const uniquePrints = document.getElementById('uniquePrints')
    const includeExtras = document.getElementById('includeExtras')
    const searchStart = document.getElementById('searchStart')
    const setInput = document.getElementById('setSearch');

    const colorOnly = document.getElementById('colorOnly');
    const colorIncluding = document.getElementById('colorIncluding');
    const colorless = document.getElementById('colorless');

    const cmcSelect = document.getElementById('cmcSelect');

    const reinitializeButton = document.getElementById('reinitializeButton');
    const resetSearch = document.getElementById('resetSearch');
    const noCardsMessage = document.getElementById('noCardsMessage');

    const rarityButtons = {
        all: document.getElementById('rarityAll'),
        mythic: document.getElementById('rarityMythic'),
        rare: document.getElementById('rarityRare'),
        uncommon: document.getElementById('rarityUncommon'),
        common: document.getElementById('rarityCommon')
    };

    let selectedRarity = '';

    function updateFetchUrl() {
        let searchTerm = searchInput.value.trim();
        let type = typeSelect.value;
        let subtype = subtypeSelect.value;
        let set = setInput.value

        let selectedColors = Array.from(colorCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value)
            .join(',');

        let selectedCMC = cmcSelect.value;

        let query = searchTerm ? `${searchTerm}` : "";
        let emptyQuery = '';

        if (set) {
            query += `+set:${set}`
        }

        if (type) {
            query += `+type:${type}`;
            emptyQuery += `+type:${type}`;
        }

        if (selectedColors) {
            if (colorless.checked) {
                query += `+-c:W+-c:U+-c:B+-c:R+-c:G`;
                emptyQuery += `+-c:W+-c:U+-c:B+-c:R+-c:G`;
            } else if (colorOnly.checked) {
                query += `+color=${selectedColors}`;  // Exact color match
                emptyQuery += `+color=${selectedColors}`;
            } else if (colorIncluding.checked) {
                query += `+ci:${selectedColors}`;  // Inclusive color match
                emptyQuery += `+ci:${selectedColors}`;
            }
        }

        if (selectedCMC) {
            query += `+cmc=${selectedCMC}`;
            emptyQuery += `+cmc=${selectedCMC}`;
        }

        if (subtype) {
            query += `+type:${subtype}`;
            emptyQuery += `+type:${subtype}`;
        }

        if (selectedRarity) {
            query += `+rarity:${selectedRarity}`;
            emptyQuery += `+rarity:${selectedRarity}`;
        }

        if(uniquePrints.checked && includeExtras.checked == false) {
            return `https://api.scryfall.com/cards/search?include_variations=true&order=dir&unique=prints&q=${query}`;
        }
        if(includeExtras.checked && uniquePrints.checked == false) {
            return `https://api.scryfall.com/cards/search?include_extras=true&order=dir&q=${query}`;
        }
        if(uniquePrints.checked && includeExtras.checked) {
            return `https://api.scryfall.com/cards/search?include_extras=true&include_variations=true&order=set&unique=prints&q=${query}`;
        }

        if (artistSearch.checked) {
            // Check if artist name contains spaces and wrap in quotes
            let artistQuery = searchTerm.includes(' ') ? `"${searchTerm}"` : searchTerm;
            return `https://api.scryfall.com/cards/search?order=dir&q=artist:${artistQuery}${emptyQuery}`;
        }

        return `https://api.scryfall.com/cards/search?order=dir&q=${query}`;
        //return `https://api.scryfall.com/cards/search?include_extras=true&include_variations=true&order=dir&unique=prints&q=name:${query}`;
    }

    function fetchCards() {
        let url = updateFetchUrl();
        console.log("Fetching cards with URL:", url);

        fetch(url)
            .then(response => response.json())
            .then(data => {

                const myNode = document.getElementById("cardList");
                if (myNode) {
                    while (myNode.firstChild) {
                        myNode.removeChild(myNode.lastChild);
                    }
                }
    
                if (data.data && Array.isArray(data.data)) {
                    if (data.data.length > 0) {
                        console.log(data.data)
                        // Set the total number of cards
                        totalCards.innerHTML = data.total_cards || data.data.length;
    
                        noCardsMessage.classList.add('hidden');  // Hide the no cards found message

                        const subtypes = new Set();
                        data.data.forEach(card => {
                            
                            if(card.type_line) {
                                if (card.type_line.includes('—')) {
                                    const parts = card.type_line.split('—');
                                    const subtypesArray = parts[1].trim().split(' ');
                                    subtypesArray.forEach(subtype => subtypes.add(subtype));
                                }
                            }
                        });

                        subtypeSelect.innerHTML = '<option value="">Tous les sous-types</option>';
                        subtypes.forEach(subtype => {
                            const option = document.createElement('option');
                            option.value = subtype.toLowerCase();
                            option.textContent = subtype;
                            subtypeSelect.appendChild(option);
                        });
                   
                        data.data.forEach(card => {
                            let displayCard;
                            if (card.image_uris && card.image_uris.normal) {
                                displayCard = new Image(250, 350);
                                displayCard.src = card.image_uris.normal;
                                displayCard.id = card.id;
                                displayCard.classList.add('singleCard', 'p-1', 'transform',  'rounded-xl', 'bg-white', 'shadow-xl', 'transition', 'duration-300', 'hover:scale-105');
                            } else if (card.card_faces[0]['image_uris'] && card.card_faces[0]['image_uris']['normal']) {
                                displayCard = new Image(250, 350);
                                displayCard.src = card.card_faces[0]['image_uris']['normal'];
                                displayCard.id = card.id;
                                displayCard.classList.add('singleCard', 'p-1');
                            }
    
                            var cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}";
                            let link = document.createElement("a");
                            let url = cardDetailUrl.replace('REPLACE_CARD_ID', card.id);
                            link.href = url;
    
                            link.appendChild(displayCard);
                            cardList.appendChild(link);
                            count.classList.remove('hidden')
                        });
                    } else {
                        setName.innerHTML = "Set non trouvé";
                        noCardsMessage.classList.remove('hidden');  // Show the no cards found message
                    }
                } else {
                    console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                    noCardsMessage.classList.remove('hidden');  // Show the no cards found message on error
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                noCardsMessage.classList.remove('hidden');  // Show the no cards found message on error
            });
    }

    // searchInput.addEventListener('input', fetchCards);
    searchStart.addEventListener('click', fetchCards);

    Array.from(colorCheckboxes).forEach(checkbox => {
        checkbox.addEventListener('change', fetchCards);
    });

    colorOnly.addEventListener('change', fetchCards);
    colorIncluding.addEventListener('change', fetchCards);
    colorless.addEventListener('change', fetchCards);

    typeSelect.addEventListener('change', fetchCards);
    subtypeSelect.addEventListener('change', fetchCards);
    artistSearch.addEventListener('change', fetchCards)
    cmcSelect.addEventListener('change', fetchCards);
    uniquePrints.addEventListener('change', fetchCards);
    includeExtras.addEventListener('change', fetchCards);

    reinitializeButton.addEventListener('click', function() {
        //searchInput.value = '';
        typeSelect.selectedIndex = 0;
        subtypeSelect.selectedIndex = 0;
        cmcSelect.selectedIndex = 0;
        artistSearch.checked = false;
        uniquePrints.checked = false;
        includeExtras.checked = false;
        setInput.value = '';

        Array.from(colorCheckboxes).forEach(checkbox => checkbox.checked = false);
        colorOnly.checked = true;

        selectedRarity = '';
        rarityButtons.all.className = '{{ active }}';
        rarityButtons.mythic.className = '{{ inactive }}';
        rarityButtons.rare.className = '{{ inactive }}';
        rarityButtons.uncommon.className = '{{ inactive }}';
        rarityButtons.common.className = '{{ inactive }}';

        noCardsMessage.classList.add('hidden');
        fetchCards();
    });

    Object.keys(rarityButtons).forEach(key => {
        rarityButtons[key].addEventListener('click', function() {
            selectedRarity = key === 'all' ? '' : key;
            Object.keys(rarityButtons).forEach(innerKey => {
                rarityButtons[innerKey].className = key === innerKey ? '{{ active }}' : '{{ inactive }}';
            });
            fetchCards();
        });
    });


    resetSearch.addEventListener('click', function() {
        // Clear text inputs
        searchInput.value = '';
        setInput.value = '';
    
        // Reset select dropdowns
        typeSelect.selectedIndex = 0;
        subtypeSelect.selectedIndex = 0;
        cmcSelect.selectedIndex = 0;
    
        // Uncheck checkboxes
        artistSearch.checked = false;
        uniquePrints.checked = false;
        includeExtras.checked = false;
    
        // Uncheck all color checkboxes
        Array.from(colorCheckboxes).forEach(checkbox => checkbox.checked = false);
        colorOnly.checked = true; // Default to "Incluant exactement"
    
        // Reset rarity selection
        selectedRarity = '';
        rarityButtons.all.className = '{{ active }}';
        rarityButtons.mythic.className = '{{ inactive }}';
        rarityButtons.rare.className = '{{ inactive }}';
        rarityButtons.uncommon.className = '{{ inactive }}';
        rarityButtons.common.className = '{{ inactive }}';
    
        // Hide "No cards found" message
        noCardsMessage.classList.add('hidden');
    
        // Hide the card count
        count.classList.add('hidden');
        
        // Clear all previously fetched cards
        const myNode = document.getElementById("cardList");
        if (myNode) {
            while (myNode.firstChild) {
                myNode.removeChild(myNode.lastChild);
            }
        }
    });



    if (searchInput.value) {
        fetchCards(); // Initial fetch when page loads if there is a search parameter given
    }
    if (setInput.value) {
        fetchCards();
    }
});
</script>
{% endblock %}
{% endblock %}