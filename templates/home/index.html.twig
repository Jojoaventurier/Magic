{% extends 'base.html.twig' %}

{% block title %}Accueil Magic-Hub{% endblock %}

{% block body %}

{% if is_granted("ROLE_USER") %}
    <a href="{{ path('app_articleForm')}}">R√©diger un article</a>
    <a href="{{ path('app_deck_manager', {'id': user.id})}}">MES DECKSSSSS</a>
{% endif %}


<div class="row-container gradient">
    <div class="column">
        <h1 class='white title-homepage justify-center'>Bienvenue sur <br><span class="bold">Magic-Hub</span></h1>
        <div id='mana-homepage' class="row space-x-4">
            <img class="big-mana low-opacity" src='{{ asset('img/arbreuh.webp')}}'>
            <img class="big-mana low-opacity"  src='{{ asset('img/flamme.webp')}}'>
            <img class="big-mana low-opacity"  src='{{ asset('img/goutte.webp')}}'>
            <img class="big-mana low-opacity"  src='{{ asset('img/mortmort.webp')}}'>
            <img class="big-mana low-opacity"  src='{{ asset('img/soleil.webp')}}'>
        </div>
        
    </div>
    <div class="column">
        <div>
            <div id='mana-homepage' class="row space-x-2 p-4">
                <img class="low-opacity small-mana" src='{{ asset('img/arbreuh.webp')}}'>
                <img class="low-opacity small-mana"  src='{{ asset('img/flamme.webp')}}'>
                <img class="low-opacity small-mana"  src='{{ asset('img/goutte.webp')}}'>
                <img class="low-opacity small-mana"  src='{{ asset('img/mortmort.webp')}}'>
                <img class="low-opacity small-mana"  src='{{ asset('img/soleil.webp')}}'>
            </div>
        </div>
        <div>
            <p class="py-2"><a class='white slim'>D√©couvrir...</a></p>
            <p class="py-2"><a class='white slim'>Chercher...</a></p>
            <p class="pt-2 pb-6"><a class='white slim'>Construire...</a></p>
        </div>

        <div class="ninety">
            <div class="searchDiv">
                <input type="text" class="search-field w-full rounded-md border-gray-200 p-2 py-2.5 pe-10 shadow-sm sm:text-sm" name="search" id="searchId" placeholder="Cherchez une carte...">
                <button class="searchIcon" type="button" id="researchStart">
                    <svg  xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="33" height="33" viewBox="0 0 50 50">
                    <path d="M 21 3 C 11.601563 3 4 10.601563 4 20 C 4 29.398438 11.601563 37 21 37 C 24.355469 37 27.460938 36.015625 30.09375 34.34375 L 42.375 46.625 L 46.625 42.375 L 34.5 30.28125 C 36.679688 27.421875 38 23.878906 38 20 C 38 10.601563 30.398438 3 21 3 Z M 21 7 C 28.199219 7 34 12.800781 34 20 C 34 27.199219 28.199219 33 21 33 C 13.800781 33 8 27.199219 8 20 C 8 12.800781 13.800781 7 21 7 Z"></path>
                    </svg>
                </button>
            </div>

            <div class="row center">
                <a class="white border-solid border-2 p-1 mx-6 my-3 rounded sm:text-sm">RECHERCHE AVANCEE</a>
                <a class="white border-solid border-2 p-1 mx-6 my-3 rounded sm:text-sm">TOUS LES SETS</a>
                <a class="white border-solid border-2 p-1 mx-6 my-3 rounded sm:text-sm">CARTE ALEATOIRE</a>
            </div>
        </div>
        
    </div>
</div>
<main>
    <div id="cardBoard" class="board"></div>
</main>


{% block javascripts %}


<script>
    console.log('This log comes from assets/app.js - welcome to AssetMapper! üéâ');

    document.addEventListener('DOMContentLoaded', function() { // le script se d√©clenche uniquement une fois le DOM charg√©
    
        const searchInput = document.getElementById('searchId'); //on r√©cup√®re l'√©l√©ment qui sert de barre de recherche √† l'utilisateur
        const researchButton = document.getElementById('researchStart'); // on r√©cup√®re le bouton qui doit d√©clenche la recherche
        const cardBoard = document.getElementById('cardBoard'); // r√©cup√®re la div dans laquelle les images et lien vers le d√©tail des cartes r√©cup√©r√©es seront ins√©r√©es
    
        researchButton.addEventListener('click', function() { // on ajoute une fonction qui se d√©clenche au clic de l'utilisateur sur le bouton qui doit d√©clencher la recherche
            const query = searchInput.value; // on attribue la valeur saisie par l'utilisateur √† une variable query qu'on va utiliser dans la requ√™te envers l'api
    
            //requ√™te √† l'api selon la recherche de l'utilisateur
            // fetch(`https://api.scryfall.com/cards/search?q=name:${query}+lang:fr`) recherche pour une carte en fran√ßais sp√©cifiquement
            fetch(`https://api.scryfall.com/cards/search?q=name:${query}`)
                // Convertit la r√©ponse en format JSON
                .then(response => response.json())
                // Une fois que les donn√©es JSON sont disponibles
                .then(data => {
                 //   console.log(data); V√©rifie le format des donn√©es
    
                    if (data.data && Array.isArray(data.data)) { // on v√©rifiqe qu'on r√©cup√®re bien des donn√©es de l'api, et quelle soit sous forme de tableau
    
                        const myNode = document.getElementById("cardBoard"); // permet de r√©initialiser l'affichage des cartes, si l'utilisateur appuie une nouvelle fois sur le bouton de recherche, les cartes affich√©es pr√©c√©demment sont enlev√©es
                            if (myNode) {
                                while (myNode.firstChild) {// tant que cardBoard a des enfants (les cartes que l'on affiche)
                                    myNode.removeChild(myNode.lastChild); // on enl√®ve le dernier enfant de cardBoard jusqu'√† ce qu'il n'y en ait plus
                                }
                            }
    
                        data.data.forEach(card => { 
    
                            if (card.image_uris && card.image_uris.normal) {
                                let displayCard = new Image(250,350); // cr√©√© un nouvel √©l√©ment <img> d'une taille fixe
                                displayCard.src = `${card.image_uris.normal}`; // j'attribue la source de l'image √† l'url correspondant √† l'image que je souhaite afficher (plusieurs tailles possibles)
                                displayCard.id = `${card.id}` // attribution de l'id scryfall de la carte √† l'id de l'√©l√©ment html image g√©n√©r√©
                                displayCard.classList.add('singleCard'); // on ajoute une classe singleCard si manipulation en css n√©cessaire
        
                                // Cr√©e un √©l√©ment <a> pour envelopper l'image
                                var cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; //on attribue le chemin vers le d√©tail de la carte √† la variable cardDetailUrl
                                let link = document.createElement("a"); // on cr√©√© un √©l√©ment <link> que l'on attribue √† la variable link
                                let url = cardDetailUrl.replace('REPLACE_CARD_ID', card.id);
                                link.href = url; // on attribue le lien vers la carte au href du de l'√©l√©ment HTML cr√©√© pour renvoyer vers le d√©tail de la carte
    
                                link.appendChild(displayCard);//  l'image est ajout√©e au lien cr√©√© pr√©c√©demment
                                cardBoard.appendChild(link) // on ajoute le lien √† la div qui affiche les carte (le l'image est ajout√©e au lien, qui lui m√™me est ajout√© √† la div cardBoard)
                           
                            } else if(card.card_faces[0]['image_uris'] && card.card_faces[0]['image_uris']['normal']) { // les cartes doubles faces ont une architecture JSON diff√©rente des cartes "normales" on ne peut pas acc√©der √† √† l'id de la meme fa√ßon
                                // exception qui r√©cup√®re la premiere face de la carte double face sinon ne s'affichent pas
                            console.log('carte double face')
                            let displayCard = new Image(250,350); 
                            displayCard.src = `${card.card_faces[0]['image_uris']['normal']}`;
                            displayCard.id = `${card.id}` 
                            displayCard.classList.add('singleCard'); 
    
                            var cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; 
                            let link = document.createElement("a"); 
                            let url = cardDetailUrl.replace('REPLACE_CARD_ID', card.id);
                            link.href = url; 

                            link.appendChild(displayCard);//  l'image est ajout√©e au lien cr√©√© pr√©c√©demment
                            cardBoard.appendChild(link)
                        }
                        });
                    } else {
                        console.error('Erreur: la r√©ponse de l\'API ne contient pas un tableau de cartes dans "data"');
                    }
                })
                .catch(error => console.error('Erreur:', error));
        });
    
    });
</script>
{% endblock %}
{% endblock %}

 


