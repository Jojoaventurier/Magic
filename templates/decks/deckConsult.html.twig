{% extends 'base.html.twig' %}

{% block title %}Constructeur de deck{% endblock %}

{% block body %}

<div class="space-y-2 block max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">

    <h1><span class='bold'>{{ deck.deckName }}</span></h2>

    <p class="font-normal text-gray-700 dark:text-gray-400">
        créé le {{ deck.creationDate|date('d.m.Y H:i') }}
    </p>
    <p class="font-normal text-gray-700 dark:text-gray-400">
        <span class="bold">Format</span> : {{ deck.format.formatName}}
    </p> <!--TODO -> lien modifier-->
    <p class="font-normal text-gray-700 dark:text-gray-400">
        <span class="bold">Description du deck :</span><br>
        {% if deck.deckDescription is same as null %}
            Aucune description pour le moment...
            {% else %}
            {{ deck.deckDescription }}
        {% endif %}
    </p>

    {% if app.user %}

        {% if app.user.decksLiked is not null %}
            {% for likedDeck in app.user.decksLiked %}
                {% if deck.deckName is same as likedDeck.deckName %}
                    <span class="mx-2 inline-flex"><img class="w-4 h-4 mt-1 mx-1" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/> ajouté en favoris.</span>
                {% else %}
                <a href="{{ path('like_deck', {'id': deck.id}) }}">
                    <div class="border border-red-800 rounded inline-flex items-center space-x-2 p-1">
                        <p class="m-0 bold">Ajouter le deck aux favoris</p>
                        <img class="w-4 h-4" src="https://img.icons8.com/material-outlined/24/like--v1.png" alt="like--v1"/>
                    </div>
                </a>
                {% endif %}
            {% endfor %}

            {% endif %}
            
        {% endif %}

        <div class="border border-red-800 rounded inline-flex items-center space-x-2 p-1">
            <p class="m-0 bold">Rédiger un commentaire</p>
            <img class="w-4 h-4" src="https://img.icons8.com/material-outlined/24/comments--v1.png" alt="comments--v1"/>
        </div>
        <div>
            <div class="inline-flex">
                (<img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
                {{ deck.likes|length }}) 
            </div>
        </div>
</div>

<div id="displayDeck" class="board">
    
    {% for element in composition %}
    <div class="card">
        {% if element.quantity > 1 %}
            <img class="singleCard" src="{{ element.card.data.image_uris.normal }}"><span>X{{ element.quantity}}</span>
            {% else %}
            <img class="singleCard" src="{{ element.card.data.image_uris.normal }}">
        {% endif %}
    </div>
    {% endfor %}
    
</div>

{% block javascripts %} 


<script>


    document.addEventListener('DOMContentLoaded', function() { 

        const searchInput = document.getElementById('searchId'); 
        const cardSelect = document.getElementById('cardSelect'); 
        const researchButton = document.getElementById('researchStart'); 
        const cardBoard = document.getElementById('cardBoard'); 
        const saveCardForm = document.getElementById('saveCardForm');
        const cardIdInput = document.getElementById('cardIdInput');
        const cardData = document.getElementById('cardData');

    
        researchButton.addEventListener('click', function() { 
            const query = searchInput.value; 
    
            // fetch(`https://api.scryfall.com/cards/search?q=is:commander+name:${query}`)
            // fetch(`https://api.scryfall.com/cards/search?q=name:${query}+lang:fr`) 
            fetch(`https://api.scryfall.com/cards/search?q=${query}`) //+type:legendary+type:creature
         
                .then(response => response.json())
                .then(data => {
                 //   console.log(data); Vérifie le format des données
    
                    if (data.data && Array.isArray(data.data)) { 
    
                        cardSelect.innerHTML = ''; // Supprime les entrées précédentes
                        const emptySpace = document.createElement('option');
                        emptySpace.innerHTML = 'Veuillez choisir une carte'
                        cardSelect.appendChild(emptySpace);
    
                        data.data.forEach(card => {
                            
                            const option = document.createElement('option'); // rajoute une option au select pour chaque carte récupérée depuis l'API
                            cardJS = JSON.stringify(card)
                            option.value =  JSON.stringify([card.id, cardJS, card.image_uris.normal])

                            option.textContent = card.name;
                            cardSelect.appendChild(option);
                         

                        });
                    } else {
                        console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                    }
                })
                .catch(error => console.error('Erreur:', error));
        });

        
        // modification dynamique selon ce que l'utilisateur choisit dans le select
        cardSelect.addEventListener('change', function() {

            let text = cardSelect.options[cardSelect.selectedIndex].textContent;

            const cardValue = JSON.parse(cardSelect.value); // Parse the JSON string back into an array
            const cardId = cardValue[0]; // First element is the card ID
            const cardDataJS = cardValue[1]; // Second element is the card data as JSON
            const imageUrl = cardValue[2];
        
            cardIdInput.value = cardId;
            cardData.value = cardDataJS;

            const myNode = document.getElementById("cardBoard"); // permet de réinitialiser l'affichage des cartes, si l'utilisateur appuie une nouvelle fois sur le bouton de recherche, les cartes affichées précédemment sont enlevées
            if (myNode) {
                while (myNode.firstChild) {// tant que cardBoard a des enfants (les cartes que l'on affiche)
                    myNode.removeChild(myNode.lastChild); // on enlève le dernier enfant de cardBoard jusqu'à ce qu'il n'y en ait plus
                }
            }

            //if (card.image_uris && card.image_uris.normal) {
                let displayCard = new Image(250,350); //création d'un affichage pour prévisualiser le commandant sélectionné dans le select
                displayCard.src = imageUrl; 

                displayCard.name = text ;
                displayCard.classList.add('singleCard'); 
                let cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; 
                let link = document.createElement("a"); 
                let url = cardDetailUrl.replace('REPLACE_CARD_ID', cardValue[0]);

                link.href = url; 

                link.appendChild(displayCard);
                cardBoard.appendChild(link)
            //}
           // console.log(value, text);
        });
    });

</script>

{% endblock %}
{% endblock %}
