{% extends 'base.html.twig' %}

{% block title %}Consulter un deck{% endblock %}

{% block body %}

<div class="space-y-2 block max-w-sm p-6 m-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">

    <h1><span class='bold'>{{ deck.deckName }}</span></h2>

    {% if deck.updateDate is same as null %}
        <p class="font-normal text-gray-700 dark:text-gray-400">
            créé le {{ deck.creationDate|date('d.m.Y H:i') }}
        </p>
    {% else %}
    <p class="font-normal text-gray-700 dark:text-gray-400">
        modifié le {{ deck.updateDate|date('d.m.Y H:i') }}
    </p>
    {% endif %}

    <p class="font-normal text-gray-700 dark:text-gray-400">
        <span class="bold">Format</span> : {{ deck.format.formatName}}
    </p> <!--TODO -> lien modifier-->
    <div class="mb-2">
        <span class="bold">Description du deck :</span><br>
        {% if deck.deckDescription is same as null %}
            <p class="mb-2 font-normal text-gray-700 dark:text-gray-400">Aucune description pour le moment...</p><!--TODO -> lien modifier-->
            {% else %}
            <p class="mb-2 font-normal text-gray-700 dark:text-gray-400">{{ deck.deckDescription }}</p>
        {% endif %}
    </div>

{% if app.user %}
    {% set isLiked = false %}

    {% if app.user.decksLiked is not null %}
        {% for likedDeck in app.user.decksLiked %}
            {% if deck.deckName == likedDeck.deckName %}
                {% set isLiked = true %}
            {% endif %}
        {% endfor %}
    {% endif %}

    {% if isLiked %}
        <!-- Link to remove the deck from favorites -->
        <a href="{{ path('remove_like_deck', {'id': deck.id}) }}" class="inline-flex items-center space-x-1">
            <img class="w-4 h-4 mt-1 mx-1" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
            <p class="m-0 text-red-600">Retirer des favoris</p>      
        </a>
    {% else %}
        <a href="{{ path('like_deck', {'id': deck.id}) }}">
            <div class="border-2 border-red-800 rounded inline-flex items-center space-x-2 px-4 py-1">
                <p class="m-0 bold">Ajouter le deck aux favoris</p>
                <img class="w-4 h-4" src="https://img.icons8.com/material-outlined/24/like--v1.png" alt="like--v1"/>
            </div>
        </a>
    {% endif %}
{% else %}
<div>
    <div class="inline-flex space-x-2">
        (<img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
        {{ deck.likes|length }}) 
    </div>
    <p class="text-gray-800 mt-4 text-sm italic">Vous devez être connecté pour liker un deck.</p>
</div>
{% endif %}
</div>

<div id="displayDeck" class="board">
    
    {% for element in composition %}
    <div class="card">
        {% if element.quantity > 1 %}
            <img class="singleCard" src="{{ element.card.data.image_uris.normal }}"><span>X{{ element.quantity}}</span>
            {% else %}
            <img class="singleCard" src="{{ element.card.data.image_uris.normal }}">
        {% endif %}
    </div>
    {% endfor %}
    
</div>

<section>
    <div class="bg-gray-100 flex flex-col items-center justify-center">
        <!-- Toggle Button -->
        {% if app.user %}
            <button id="toggleCommentForm" class="bg-red-800 text-white mt-12 px-4 py-2 rounded-lg hover:bg-red-900 transition duration-300">
                Ajouter un commentaire 
            </button>
        {% else %}
            <p class="text-red-600 mt-6 text-sm">Vous devez être connecté pour publier un commentaire.</p>
        {% endif %}

        <!-- Comment Form Section -->
        <div id="commentFormContainer" class="w-full max-w-2xl px-4 mt-10 hidden">
            <div class="bg-white rounded-2xl px-8 py-4 shadow-lg relative">
                <!-- Close Button -->
                <button id="closeCommentForm" class="absolute top-2 right-4 text-gray-600 hover:text-gray-800">
                    &times;
                </button>
                <h3 class="text-xl font-semibold mb-2">Ajouter un commentaire</h3>
                {{ form_start(commentForm) }}
                    <div class="mb-4">
                        {{ form_row(commentForm.textContent, {'attr': {'class': 'w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-red-800'}}) }}
                    </div>
                    <div class="flex justify-end">
                        {{ form_row(commentForm.submit) }}
                    </div>
                {{ form_end(commentForm) }}
            </div>
        </div>
    </div>
</section>
<section>   
    <div class="bg-gray-100 p-10 flex flex-col items-center justify-center">
        <h3 class="text-2xl font-bold mb-4">Commentaires :</h3>
        <div class="w-full max-w-2xl px-4 mb-6">
            {% for comment in comments %}
                <div class="bg-white rounded-2xl px-8 py-6 m-6 shadow-lg hover:shadow-2xl transition duration-500">
                    <div class="mb-4">
                        <p class="text-md text-gray-700">{{ comment.textContent }}</p>
                    </div>
                    <div class="flex justify-between items-center">
                        <div class="text-sm font-semibold">
                            {{ comment.user.userName }} • 
                            {% if comment.updateDate is same as null %}
                                le {{ comment.creationDate|date('d.m.Y H:i') }}
                            {% else %}
                                <span class="font-normal">modifié le {{ comment.updateDate|date('d.m.Y H:i') }}</span>
                            {% endif %}
                        </div>
                        {% if app.user is same as comment.user %}
                            <div class="flex space-x-4">
                                <a href="{{ path('edit_comment', {'deck': deck.id, 'comment': comment.id}) }}" class="text-black hover:underline">Modifier</a>
                                <form action="{{ path('delete_comment', {'deck': deck.id, 'comment': comment.id}) }}" method="post" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?');">
                                    <button type="submit" class="text-red-600 hover:underline">Supprimer</button>
                                </form>
                                {# <a href="#" class="text-red-600 hover:underline">Supprimer</a> #}
                            </div>
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</section>

{% block javascripts %} 


<script>


    document.addEventListener('DOMContentLoaded', function() { 

        const searchInput = document.getElementById('searchId'); 
        const cardSelect = document.getElementById('cardSelect'); 
        const researchButton = document.getElementById('researchStart'); 
        const cardBoard = document.getElementById('cardBoard'); 
        const saveCardForm = document.getElementById('saveCardForm');
        const cardIdInput = document.getElementById('cardIdInput');
        const cardData = document.getElementById('cardData');

    
        researchButton.addEventListener('click', function() { 
            const query = searchInput.value; 
    
            // fetch(`https://api.scryfall.com/cards/search?q=is:commander+name:${query}`)
            // fetch(`https://api.scryfall.com/cards/search?q=name:${query}+lang:fr`) 
            fetch(`https://api.scryfall.com/cards/search?q=${query}`) //+type:legendary+type:creature
         
                .then(response => response.json())
                .then(data => {
                 //   console.log(data); Vérifie le format des données
    
                    if (data.data && Array.isArray(data.data)) { 
    
                        cardSelect.innerHTML = ''; // Supprime les entrées précédentes
                        const emptySpace = document.createElement('option');
                        emptySpace.innerHTML = 'Veuillez choisir une carte'
                        cardSelect.appendChild(emptySpace);
    
                        data.data.forEach(card => {
                            
                            const option = document.createElement('option'); // rajoute une option au select pour chaque carte récupérée depuis l'API
                            cardJS = JSON.stringify(card)
                            option.value =  JSON.stringify([card.id, cardJS, card.image_uris.normal])

                            option.textContent = card.name;
                            cardSelect.appendChild(option);
                         

                        });
                    } else {
                        console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                    }
                })
                .catch(error => console.error('Erreur:', error));
        });

        
        // modification dynamique selon ce que l'utilisateur choisit dans le select
        cardSelect.addEventListener('change', function() {

            let text = cardSelect.options[cardSelect.selectedIndex].textContent;

            const cardValue = JSON.parse(cardSelect.value); // Parse the JSON string back into an array
            const cardId = cardValue[0]; // First element is the card ID
            const cardDataJS = cardValue[1]; // Second element is the card data as JSON
            const imageUrl = cardValue[2];
        
            cardIdInput.value = cardId;
            cardData.value = cardDataJS;

            const myNode = document.getElementById("cardBoard"); // permet de réinitialiser l'affichage des cartes, si l'utilisateur appuie une nouvelle fois sur le bouton de recherche, les cartes affichées précédemment sont enlevées
            if (myNode) {
                while (myNode.firstChild) {// tant que cardBoard a des enfants (les cartes que l'on affiche)
                    myNode.removeChild(myNode.lastChild); // on enlève le dernier enfant de cardBoard jusqu'à ce qu'il n'y en ait plus
                }
            }

            //if (card.image_uris && card.image_uris.normal) {
                let displayCard = new Image(250,350); //création d'un affichage pour prévisualiser le commandant sélectionné dans le select
                displayCard.src = imageUrl; 

                displayCard.name = text ;
                displayCard.classList.add('singleCard'); 
                let cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; 
                let link = document.createElement("a"); 
                let url = cardDetailUrl.replace('REPLACE_CARD_ID', cardValue[0]);

                link.href = url; 

                link.appendChild(displayCard);
                cardBoard.appendChild(link)
            //}
           // console.log(value, text);
        });
    });

    const toggleButton = document.getElementById('toggleCommentForm');
    const formContainer = document.getElementById('commentFormContainer');
    const closeButton = document.getElementById('closeCommentForm');

    // Show the form when the button is clicked
    toggleButton.addEventListener('click', function() {
        formContainer.classList.toggle('hidden');
        toggleButton.classList.toggle('hidden');
    });

    // Hide the form when the close button is clicked
    closeButton.addEventListener('click', function() {
        formContainer.classList.add('hidden');
        toggleButton.classList.remove('hidden');
    });

</script>

{% endblock %}
{% endblock %}
