{% extends 'base.html.twig' %}

{% block title %}Constructeur de deck{% endblock %}

{% block body %}

<h1 class="hidden">Deck Builder</h1>

<div class="gradient-adapt flex flex-wrap justify-center items-center space-x-8 w-full pb-8" > <!--style="background: url(' deck.commander.image_uris.art_crop ') no-repeat center center;"-->

    <div class="space-y-2 block max-w-sm p-6 m-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
        <h1><span class='bold'>{{ deck.deckName }}</span></h2>
        <span class="pl-4">
            <p class="font-normal text-sm italic text-gray-700 dark:text-gray-400">
                créé le <span class="font-semibold">{{ deck.creationDate|date('d.m.Y à H:i') }}</span>
            </p>

            {% if deck.updateDate %}
            <p class="font-normal text-sm italic text-gray-700 dark:text-gray-400">
                modifié le <span class="font-semibold">{{ deck.updateDate|date('d.m.Y à H:i') }}</span>
            </p>
            {% endif %}
        </span>
        
        <p class="font-normal text-gray-700 dark:text-gray-400">
            <span class="bold">Format</span> : {{ deck.format.formatName}}
        </p> <!--TODO -> lien modifier-->
        <p class="font-normal text-gray-700 dark:text-gray-400">
            <span class="bold">Description du deck :</span><br>
            {% if deck.deckDescription is same as null %}
                Aucune description pour le moment...
                {% else %}
                {{ deck.deckDescription }}
            {% endif %}
        </p>
        <div>
            <div class="inline-flex">
                (<img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
                {{ deck.likes|length }}) 
            </div>
        </div>
        <a class="red hover:underline" href="{{ path('delete_deck', {'user': deck.user.id, 'deck': deck.id}) }}">Supprimer le deck</a><br>
        <a class="red hover:underline" href="{{ path('delete_all_cards_deck', {'user': deck.user.id, 'deck': deck.id}) }}">Supprimer toutes les cartes du deck</a><br>
    </div>

{% if deck.format.formatName is same as 'Commander / EDH'%}
            {% if deck.commander is not null %}
            <div class="py-8 opacity-50">
                <a>
                    <img class="fade" src="{{ deck.commander.image_uris.art_crop }}">
                </a>
            </div>
            {% else %}
            <!--Commencez par ajouter un commandant-->
            {% endif %}

            <div class="space-y-4 block max-w-sm p-6 m-4 bg-white  rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-fit bg-opacity-0">
                <h3 class="font-semibold text-white border border-white px-4 py-2  rounded-lg text-center">Votre Commandant</h3>
                <div id="commandZone" class="w-fit">
                    {% if deck.commander is not null %}
                    <img class="commanderCard" src="{{ deck.commander.image_uris.normal }}">
                    <a class="flex justify-center text-red-500 text-sm hover:underline mt-4" href="{{ path('delete_commander', {'user': deck.user.id, 'deck': deck.id}) }}">Supprimer le commandant</a>
                    {% endif %}
                </div>
            </div>

    {% endif %}
</div>

{% if deck.format.formatName == 'Commander / EDH' %}
    {% set format = "commander" %}
{% else %}
    {% set format = deck.format.formatName|lower %}
{% endif %}

<div class="row space-x-4 p-4">

    {% if deck.format.formatName is same as 'Commander / EDH' and deck.commander is same as null %}
        Rechercher un commandant :
        <input type="text" class="search" name="search" id="searchId" placeholder="Cherchez une carte...">
        <select class="card" name="cardName" id="cardSelect"></select>
        <button type="button" id="researchStart">Rechercher</button><br>

        <form id="saveCommanderForm" method="post" action="{{ path('save_commander_deck', {'user': deck.user.id, 'deck': deck.id}) }}">
            <input type="hidden" id="cardIdInput" name="cardId">
            <input type="hidden" id="cardData" name="cardData">
            <button type="submit">Ajouter en tant que commandant</button>
        </form>

    {% elseif deck.format.formatName is same as 'Commander / EDH' and deck.commander is not null %}
        Rechercher une carte :
        <input type="hidden" id="colors" value="{{ deck.commander.color_identity|join('') }}">
        <input type="text" class="search" name="search" id="searchId" placeholder="Cherchez une carte...">
        <select class="card" name="cardName" id="cardSelect"></select>
        <button type="button" id="researchStart">Rechercher</button><br>

        <form id="saveCardWithColorsForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id}) }}">
            <input type="hidden" id="cardIdInput" name="cardId">
            <input type="hidden" id="cardData" name="cardData">
            <button type="submit">Ajouter la carte</button>
        </form>
        <input type="checkbox" id="noRestrictions" name="noRestrictions">
        <label for="noRestrictions">Ignorer les restrictions du format pour la recherche</label>

    {% elseif deck.format.formatName is not same as 'Commander / EDH' %}

        Rechercher une carte :
        <input type="hidden" id="format" value="{{ format }}">
        <input type="text" class="search" name="search" id="searchId" placeholder="Cherchez une carte...">
        <select class="card" name="cardName" id="cardSelect"></select>
        <button type="button" id="researchStart">Rechercher</button><br>

        <form id="saveCardFormatForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id}) }}">
            <input type="hidden" id="cardIdInput" name="cardId">
            <input type="hidden" id="cardData" name="cardData">
            <button type="submit">Ajouter la carte</button>
        </form>
        <input type="checkbox" id="noRestrictions" name="noRestrictions">
        <label for="noRestrictions">Ignorer les restrictions du format pour la recherche</label>

    {% elseif 'ignore format and colors' %}

        Rechercher une carte :
        <input type="text" class="search" name="search" id="searchId" placeholder="Cherchez une carte...">
        <select class="card" name="cardName" id="cardSelect"></select>
        <button type="button" id="researchStart">Rechercher</button><br>

        <form id="saveCardForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id}) }}">
            <input type="hidden" id="cardIdInput" name="cardId">
            <input type="hidden" id="cardData" name="cardData">
            <button type="submit">Ajouter la carte</button>
        </form>
    {% endif %}
</div>

<div id="cardBoard" class="board">
    <img id="cardImage">
</div>

{# <div id="displayDeck" class="board"> #}
    <div class="light-white p-8 flex flex-wrap justify-center">
      
        <div class="px-8 mt-3 mb-5 w-full">
        <!--<div class="container mt-3 mb-5">-->
            <!-- Toggle View Buttons -->
            <div class="flex justify-between mb-4 mr-4">
                <div>
                    <p>Nombre de cartes dans le deck : 
                        {{ count }}
                        {% if deck.format.formatName is same as 'Commander / EDH' %}
                            / 99</p>
                        {% else %}
                            / 60</p>
                        {% endif %}
                </div>
                <div class="flex flex-end">
                    <button id="editDeckButton" class="mb-4 bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 mr-4">Modifier le deck</button>
                    <button id="listViewBtn" class="mb-4 px-6 py-2 bg-gray-300 hover:bg-gray-400 rounded-l">List View</button>
                    <button id="imageViewBtn" class="mb-4 px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded-r">Image View</button>
                </div>
            </div>


            <article class="deckView flex justify-center">
                <div class="w-72 mr-6">
                    <img id="placeholder" class="singleCard" src="{{ asset('img/Magic_the_gathering-card_back.jpg') }}">
                </div>
            

                {% set card_types = ["Creature", "Sorcery", "Instant", "Enchantment", "Artifact", "Planeswalker", "Land"] %}
            
                <div id="listView" class="flex-wrap w-full">
                    {% for type in card_types %}
                        {% set type_count = 0 %}
                        {% for element in composition %}
                            {% if type in element.card.data.type_line %}
                                {% set type_count = type_count + 1 %}
                            {% endif %}
                        {% endfor %}
            
                        {% if type_count > 0 %}
                            <div id="{{ type|lower }}Cards" class="category-container mr-3">
                                <h3>{{ type }} ({{ type_count }})</h3>
                                <ul class="list-none">
                                    {% for element in composition %}
                                        {% if type in element.card.data.type_line %}
                                            <li>
                                                    <div class="flex items-center text-sm">
                                                        {% if element.card.data.legalities[format] is defined %}
                                                            <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                                <span class="card-name pr-2  
                                                                    {% if element.card.data.legalities[format] is not same as 'legal' %}
                                                                    text-grey-400 italic
                                                                    {% endif %}" 
                                                                    data-image="{{ element.card.data.image_uris.normal }}"
                                                                >
                                                                    {{ element.quantity }}x {{ element.card.data.name }}
                                                                </span>
                                                            </a>

                                                        {% if element.card.data.legalities[format] is not same as 'legal' %}
                                                            <div class="hover-warning" title="La carte n'est pas légale dans ce format">
                                                                <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                            </div>
                                                        {% endif %}

                                                        {% if element.quantity > deck.format.maxQuantity %}
                                                            <div class="hover-warning" title="Quantité supérieure à la limite autorisée par le format">
                                                                <img class="w-4" src="https://img.icons8.com/color/48/error--v1.png" alt="yellow warning - quantity error"/>
                                                            </div>
                                                        {% endif %}

                                                    {% if format is same as('commander') and deck.commander is not null %}
                                                        {% set colorIdentity = deck.commander.colors %}
                                                        {% set allColorsMatch = true %} {# Assume all colors match initially #}
                                                        
                                                        {% for color in element.card.data.colors %}
                                                            {% if color not in colorIdentity %}
                                                                {% set allColorsMatch = false %} {# If any color doesn't match, set to false #}
                                                            {% endif %}
                                                        {% endfor %}

                                                        {% if allColorsMatch %}
                                                        {% else %}
                                                        <div class="hover-warning" title="La ou les couleurs de cette carte rendent le deck illégal">
                                                            <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                        </div>
                                                        {% endif %}
                                                    {% endif %}

                                                    {% endif %}
                                                    </div>
                                                <span class="space-x-2 edit-links hidden">
                                                    <a class="hover:underline" href="{{ path('plus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id}) }}">+1</a>
                                                    <a class="hover:underline" href="{{ path('minus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id}) }}">-1</a>
                                                    <a class="hover:underline red" href="{{ path('delete_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id}) }}">Supprimer</a>
                                                </span>
                                            </li>
                                        {% endif %}
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            
            
                <div id="imageView" class="grid grid-cols-1 gap-4 w-full">
                    {% for type in card_types %}
                        {% set type_count = 0 %}
                        {% for element in composition %}
                            {% if type in element.card.data.type_line %}
                                {% set type_count = type_count + 1 %}
                            {% endif %}
                        {% endfor %}
                
                        {% if type_count > 0 %}
                            <div id="{{ type|lower }}Cards" class="category-container-image w-full">
                                <h3>{{ type }} ({{ type_count }})</h3>
                                <div id="displayDeck" class="flex flex-wrap">
                                    {% for element in composition %}
                                        {% if type in element.card.data.type_line %}
                                            <div class="card">
                                                {% if element.card.data.legalities[format] is defined %}
                                                    {% if element.quantity > 1 %}
                                                        {% if element.quantity > deck.format.maxQuantity %}
                                                        <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                            <img class="singleCard" src="{{ element.card.data.image_uris.normal }}">
                                                            <span class="card-span red-span">X{{ element.quantity }}</span>
                                                        </a>
                                                        {% else %}
                                                        <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                            <img class="singleCard" src="{{ element.card.data.image_uris.normal }}">
                                                            <span class="card-span white-span">X{{ element.quantity }}</span>
                                                        </a>
                                                        {% endif %}
                                                    {% else %}
                                                    <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                        <img class="singleCard" src="{{ element.card.data.image_uris.normal }}">
                                                    </a>
                                                    {% endif %}
                                                    
                                                    {% if element.card.data.legalities[format] is not same as 'legal' %}
                                                        
                                                        <div class="warning-illegal w-full">
                                                            <div class="flex flex-col items-center justify-center">
                                                                <img class="w-10" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                                <p>Non-légale dans le format</p>
                                                            </div>
                                                        </div>
                                                            
                                                    {% endif %}
                                                    {% if element.quantity > deck.format.maxQuantity %}
                                                        
                                                        <div class="warning-quantity w-full">
                                                            <div class="flex flex-col items-center justify-center">
                                                                <img class="w-10" src="https://img.icons8.com/color/48/error--v1.png" alt="yellow warning - quantity error"/>
                                                                <p>Quantité autorisée dépassée</p>
                                                            </div>
                                                        </div>
                                                    {% endif %}
                                                    {% if format is same as('commander') and deck.commander is not null %}
                                                        {% set colorIdentity = deck.commander.colors %}
                                                        {% set allColorsMatch = true %} {# Assume all colors match initially #}
                                                        
                                                        {% for color in element.card.data.colors %}
                                                            {% if color not in colorIdentity %}
                                                                {% set allColorsMatch = false %} {# If any color doesn't match, set to false #}
                                                            {% endif %}
                                                        {% endfor %}

                                                        {% if allColorsMatch is same as false %}
                                                        <div class="warning-illegal w-full">
                                                            <div class="flex flex-col items-center justify-center">
                                                                <img class="w-10" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                                <p>Identité de couleur non-autorisée</p>
                                                            </div>
                                                        </div>
                                                        {% endif %}
                                                    {% endif %}

                                                {% endif %}

                                                <span class="edit-links hidden">
                                                    <a class="hover:underline" href="{{ path('plus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id}) }}">+1</a>
                                                    <a class="hover:underline" href="{{ path('minus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id}) }}">-1</a>
                                                    <a class="hover:underline red" href="{{ path('delete_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id}) }}">Supprimer</a>
                                                </span>
                                            </div>
                                        {% endif %}
                                    {% endfor %}
                                </div>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            </article>
        </div>

    </div>
    
{# </div> #}

{% block javascripts %} 

<script> //TODO affichage des decks sous forme de carte
        //TODO ajouter une fonction saveCommander (sauvegarder data en JSON) et affichage de la carte dans la vue
        //TODO ajouter un attribut location dans composition
        //TODO max number of cards

        document.addEventListener('DOMContentLoaded', function() { 

            const placeholder = document.getElementById('placeholder');
            const cardImages = document.querySelectorAll('.singleCard');
            const cardNames = document.querySelectorAll('.card-name');
            const placeholderDefault = placeholder.src

            // Change placeholder image on card image hover
            cardImages.forEach(image => {
                image.addEventListener('mouseover', function () {
                    placeholder.src = this.src;
                });

                image.addEventListener('mouseout', function () {
                    placeholder.src = placeholderDefault; // or reset to a default image: 'placeholder.src = "default_image.jpg";'
                });
            });

            // Change placeholder image on card name hover
            cardNames.forEach(name => {
                name.addEventListener('mouseover', function () {
                    placeholder.src = this.dataset.image;
                });

                name.addEventListener('mouseout', function () {
                    placeholder.src = placeholderDefault; // or reset to a default image
                });
            });

            const searchInput = document.getElementById('searchId'); 
            const cardSelect = document.getElementById('cardSelect'); 
            const researchButton = document.getElementById('researchStart'); 
            const cardBoard = document.getElementById('cardBoard'); 
            const saveCardForm = document.getElementById('saveCardForm');
            const cardIdInput = document.getElementById('cardIdInput');
            const cardData = document.getElementById('cardData');

            const editDeckButton = document.getElementById('editDeckButton');
            const editLinks = document.querySelectorAll('.edit-links');

            editDeckButton.addEventListener('click', function() {
                editLinks.forEach(function(link) {
                    link.classList.toggle('hidden');
                });
            });
        
            researchButton.addEventListener('click', function() { 

                const query = searchInput.value; 
                let url;

                let noRestrictions = document.getElementById('noRestrictions')

                if(noRestrictions.checked) {
                    url = `https://api.scryfall.com/cards/search?q=name:${query}`;
               
                } else if (document.getElementById('saveCommanderForm')) {
                    url = `https://api.scryfall.com/cards/search?q=is:commander+name:${query}`;

                } else if (document.getElementById('saveCardWithColorsForm')) {
                    url = `https://api.scryfall.com/cards/search?q=identity<=${document.getElementById('colors').value}+legal:commander+name:${query}`

                } else if (document.getElementById('saveCardFormatForm')) {
                    url = `https://api.scryfall.com/cards/search?q=legal:${document.getElementById('format').value}+name:${query}`

                } else {
                    url = `https://api.scryfall.com/cards/search?q=name:${query}`;
                } 
                //TODO gérer la requête dynamiquement en fonction du format ! 
                console.log(url);
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.data && Array.isArray(data.data)) { 
                            cardSelect.innerHTML = ''; // Clear previous entries
                            const emptySpace = document.createElement('option');
                            emptySpace.innerHTML = 'Veuillez choisir une carte';
                            cardSelect.appendChild(emptySpace);
        
                            data.data.forEach(card => {
                                const option = document.createElement('option'); // Add an option for each card retrieved from the API
                                const cardJS = JSON.stringify(card);
                                option.value = JSON.stringify([card.id, cardJS, card.image_uris?.normal || '']);
        
                                option.textContent = card.name;
                                cardSelect.appendChild(option);
                            });
                        } else {
                            console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                        }
                    })
                    .catch(error => console.error('Erreur:', error));
            });
        
            // Dynamic modification based on the user's selection in the select element
            cardSelect.addEventListener('change', function() {
                const cardValue = JSON.parse(cardSelect.value); // Parse the JSON string back into an array
                const cardId = cardValue[0]; // First element is the card ID
                const cardDataJS = cardValue[1]; // Second element is the card data as JSON
                const imageUrl = cardValue[2];
                
                cardIdInput.value = cardId;
                cardData.value = cardDataJS;
        
                const myNode = document.getElementById("cardBoard"); // Reset the card display if a new search is made
                if (myNode) {
                    while (myNode.firstChild) { // Clear previously displayed cards
                        myNode.removeChild(myNode.lastChild);
                    }
                }
        
                if (imageUrl) {
                    const displayCard = new Image(250, 350); // Create an image to preview the selected commander
                    displayCard.src = imageUrl; 
        
                    displayCard.name = cardSelect.options[cardSelect.selectedIndex].textContent;
                    displayCard.classList.add('singleCard'); 
                    let cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; 
                    let link = document.createElement("a"); 
                    let url = cardDetailUrl.replace('REPLACE_CARD_ID', cardValue[0]);
        
                    link.href = url; 
                    link.appendChild(displayCard);
                    cardBoard.appendChild(link);
                }
            });
        
            // Switch between list view and image view
            const listViewBtn = document.getElementById('listViewBtn');
            const imageViewBtn = document.getElementById('imageViewBtn');
            const listView = document.getElementById('listView');
            const imageView = document.getElementById('imageView');
        
            listView.classList.add('flex');
            imageView.classList.add('hidden');
        
            listViewBtn.addEventListener('click', function() {
                listView.classList.toggle('hidden', false);
                listView.classList.toggle('flex', true);
                imageView.classList.toggle('board', false);
                imageView.classList.toggle('hidden', true);
            });
        
            imageViewBtn.addEventListener('click', function() {
                imageView.classList.toggle('hidden', false);
                imageView.classList.toggle('board', true);
                listView.classList.toggle('flex', false);
                listView.classList.toggle('hidden', true);
            });
        });

</script>

{% endblock %}
{% endblock %}
