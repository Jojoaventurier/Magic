{% extends 'base.html.twig' %}

{% block title %}Constructeur de deck{% endblock %}

{% block body %}

<h1 class="hidden">Deck Builder</h1>

<div class="bg-gradient-purple flex flex-wrap justify-center items-center space-x-8 w-full pt-12 pb-8" > <!--style="background: url(' deck.commander.image_uris.art_crop ') no-repeat center center;"-->


    <div class="space-y-2 relative block max-w-sm p-6 m-6 bg-white border border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
        
        <a class="absolute bg-white text-white p-2 mx-6 my-7 rounded top-0 right-0 hover:border hover:bg-gray-100" 
        href="{{ path('app_qr_code', { 'slug': 'lien vers le deck' }) }}" 
        target="_blank" 
        title="Générer un QR code pour ce deck">
            <img class="h-12 w-auto" src="\icons\mana\image.png" alt="external-qr-code"/>
        </a>

            <h2>
                <span class='bold'>
                    {{ deck.deckName }}
                </span>
            </h2>

            <h2 class="text-sm hover:underline">par <a href="{{ path('app_profile', {'user': deck.user.username}) }}">{{ deck.user.username }}</a></h2>
        <span class="pl-4">
            <p class="font-normal text-sm italic text-gray-700 dark:text-gray-400">
                créé le <span class="font-semibold">{{ deck.creationDate|date('d.m.Y à H:i') }}</span>
            </p>

            {% if deck.updateDate %}
            <p class="font-normal text-sm italic text-gray-700 dark:text-gray-400">
                modifié le <span class="font-semibold">{{ deck.updateDate|date('d.m.Y à H:i') }}</span>
            </p>
            {% endif %}
        </span>
        
        <p class="font-normal text-gray-700 dark:text-gray-400">
            <span class="bold">Format</span> : {{ deck.format.formatName}}
        </p> <!--TODO -> lien modifier-->
        <p class="font-normal text-gray-700 dark:text-gray-400">
            <span class="bold">Description du deck :</span><br>
            {% if deck.deckDescription is same as null %}
                Aucune description pour le moment...
                {% else %}
                {{ deck.deckDescription }}
            {% endif %}
        </p>
        <div>
            {% if app.user %}
            {% set isLiked = false %}

                {% if app.user.decksLiked is not null %}
                    {% for likedDeck in app.user.decksLiked %}
                        {% if deck.deckName == likedDeck.deckName %}
                            {% set isLiked = true %}
                        {% endif %}
                    {% endfor %}
                {% endif %}

                {% if isLiked %}
                    <!-- Link to remove the deck from favorites -->
                    <a href="{{ path('remove_like_deck', {'id': deck.id}) }}" class="inline-flex items-center space-x-1">
                        <img class="w-4 h-4 mt-1 mx-1" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
                        <p class="m-0 text-red-600">Retirer des favoris</p>      
                    </a>
                {% else %}
                    <a href="{{ path('like_deck', {'id': deck.id}) }}">
                        <div class="border-2 border-red-800 rounded inline-flex items-center space-x-2 px-4 py-1 hover:bg-red-800 hover:text-white transition duration-300">
                            <p class="m-0">Ajouter le deck aux favoris</p>
                            <img class="w-4 h-4" src="https://img.icons8.com/material-outlined/24/like--v1.png" alt="like--v1"/>
                        </div>
                    </a>
                {% endif %}
            <div class="flex space-x-2">
                (<img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
                {{ deck.likes|length }}) 
            </div>
            {% else %}
            <div>
                <div class="flex space-x-2">
                    (<img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
                    {{ deck.likes|length }}) 
                </div>
                <p class="text-gray-800 mt-4 text-sm italic">Vous devez être connecté pour liker un deck.</p>
            </div>
            {% endif %}
        </div>

        {% if app.user is same as deck.user %}   
            <a class="red hover:underline" href="{{ path('delete_deck', {'user': deck.user.id, 'deck': deck.id}) }}">Supprimer le deck</a><br>
            <a class="red hover:underline" href="{{ path('delete_all_cards_deck', {'user': deck.user.id, 'deck': deck.id}) }}">Supprimer toutes les cartes du deck</a><br>
        {% endif %}

        <button id="downloadButton" class="my-4 bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 mr-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
           Exporter le deck
        </button>
        <div id="downloadLinks" class="hidden w-full mt-4">
            <button id="closeButton" class="absolute top-0 right-0 mt-2 mr-2 text-gray-600 hover:text-gray-900">
                &times;
            </button>
            <a class="mb-4 bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 mr-4" href="{{ path('export_deck_txt', {'user': deck.user.id, 'deck': deck.id}) }}">.txt</a><br>
            <a class="mb-4 bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 mr-4" href="{{ path('export_deck_csv', {'user': deck.user.id, 'deck': deck.id}) }}">.csv</a><br>
        </div>

    </div>
    
{% if deck.format.formatName is same as 'Commander / EDH'%}
            {% if deck.commander is not null %}
            <div class="py-8 opacity-50">
                <a>
                    <img class="fade" src="{{ deck.commander.image_uris.art_crop }}">
                </a>
            </div>
            {% else %}
            <!--Commencez par ajouter un commandant-->
            {% endif %}

            <div class="space-y-4 block max-w-sm p-6 m-4 bg-white  rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-fit bg-opacity-0">
                <h3 class="font-semibold text-white border border-white px-4 py-2  rounded-lg text-center">Votre Commandant</h3>
                <div id="commandZone" class="w-fit">
                    {% if deck.commander is not null %}
                        <a href="{{ path('app_card_detail', {'cardId': deck.commander.id}) }}">
                            <img class="commanderCard transform  rounded-xl bg-white shadow-xl transition duration-300 hover:scale-105" src="{{ deck.commander.image_uris.normal }}">
                        </a>
                        {% if app.user is same as deck.user %}
                            <a class="flex justify-center text-red-500 text-sm hover:underline mt-4" href="{{ path('delete_commander', {'user': deck.user.id, 'deck': deck.id}) }}">Supprimer le commandant</a>
                        {% endif %}

                    {% endif %}
                </div>
            </div>

    {% endif %}
</div>


{% if deck.format.formatName == 'Commander / EDH' %}
    {% set format = "commander" %}
{% else %}
    {% set format = deck.format.formatName|lower %}
{% endif %}

    {% if app.user is same as deck.user %}
    {% if count >= deck.format.maxNbOfCards %}
    <div class="inline-flex justify-center w-full m-6">
        <p class="text-center text-red-600 italic font-semibold border border-red-600 p-2">Vous avez trop de carte dans le deck, veuillez en supprimer pour pouvoir en ajouter d'autres.</p>
    </div>
    {% else %}
<div id="filtersWrapper" class="flex flex-col justify-center items-center bg-white py-6">
    <div class="bg-white rounded-md">
        <div class="flex justify-center items-center mt-3">
            <div class="flex items-center space-x-2 bg-white  border border-red-700 text-sm py-1 px-2 rounded-lg shadow-md hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300">
                <label for="stateSelector" class="text-red-700 text-sm">Ajouter la carte au</label>
                <select name="stateSelector" id="stateSelector" class="bg-red-700 text-white text-sm font py-1 px-3 rounded-md  focus:outline-none focus:ring-2 focus:ring-white">
                    <option value="Mainboard" selected>Mainboard</option>
                    <option value="Sideboard">Sideboard</option>
                    <option value="Maybeboard">Maybeboard</option>
                </select>
            </div>
        </div>
        <div class="flex  flex-wrap justify-center items-center">
            {% if deck.format.formatName is same as 'Commander / EDH' and deck.commander is same as null %}
            
                <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-3 mx-4">
                    <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-2 w-full md:w-auto">
                        <label for="searchId" class="sr-only">Rechercher un commandant</label>
                        <input type="text" class="h-10 search bg-white border border-red-700 focus:border-red-900 text-red-900 placeholder-red-700 text-sm rounded-md px-3 focus:outline-none focus:ring-2 focus:ring-red-900 w-full md:w-64 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300" name="search" id="searchId" placeholder="Cherchez une carte...">
                        <label for="cardSelect" class="sr-only">Choisir une carte</label>
                    </div>
                    <select class="card" name="cardName" id="cardSelect"></select>
                    <button class="h-10 border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md transition duration-300 ease-in-out" type="button" id="researchStart">Rechercher</button><br>
                </div>

                <form id="saveCommanderForm" method="post" action="{{ path('save_commander_deck', {'user': deck.user.id, 'deck': deck.id}) }}">
                    <input type="hidden" id="cardIdInput" name="cardId">
                    <input type="hidden" id="cardData" name="cardData">
                    <button id="save" class="border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md hidden" type="submit">Ajouter en tant que commandant</button>
                </form>

            {% elseif deck.format.formatName is same as 'Commander / EDH' and deck.commander is not null %}
                <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-3 mx-4">
                    <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-2 w-full md:w-auto">
                        <label for="searchId" class="sr-only">Rechercher une carte</label>
                        <input type="text" class="h-10 inline-flex tracking-wide bg-white border border-red-700 focus:border-red-900 text-red-900 placeholder-red-700 text-sm rounded-md px-3 focus:outline-none w-full md:w-64 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300" name="search" id="searchId" placeholder="Cherchez une carte...">
                        <label for="cardSelect" class="sr-only">Choisir une carte</label>
                    </div>
                    <select class="card" name="cardName" id="cardSelect"></select>
                    <button class="h-10 border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md transition duration-300 ease-in-out" type="button" id="researchStart">Rechercher</button><br>
                </div>

                <form id="saveCardWithColorsForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id, 'state': 'Mainboard'}) }}">
                    <input type="hidden" id="cardIdInput" name="cardId">
                    <input type="hidden" id="cardData" name="cardData">
                    <input type="hidden" id="colors" value="{{ deck.commander.color_identity|join('') }}">
                    <button id="save" class="h-10 border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md hidden" type="submit">Ajouter la carte</button>
                </form>
                <div class="p-1 m-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300 rounded">
                    <input type="checkbox" id="noRestrictions" name="noRestrictions">
                    <label for="noRestrictions" class="text-sm italic text-red-700">Ignorer les restrictions du format</label>
                </div>
            {% elseif deck.format.formatName is not same as 'Commander / EDH' %}

                <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-3 mx-4">
                    <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-2 w-full md:w-auto">
                        <label for="searchId" class="sr-only">Rechercher une carte</label>
                        <input type="text" class="h-10 search bg-white border border-red-700 focus:border-red-900 text-red-900 placeholder-red-700 text-sm rounded-md  px-3 focus:outline-none focus:ring-2 focus:ring-red-900 w-full md:w-64 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300" name="search" id="searchId" placeholder="Cherchez une carte...">
                        <label for="cardSelect" class="sr-only">Choisir une carte</label>
                    </div>
                    <select class="card" name="cardName" id="cardSelect"></select>
                    <button class="h-10 border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md transition duration-300 ease-in-out " type="button" id="researchStart">Rechercher</button><br>
                </div>

                <form id="saveCardFormatForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id, 'state': 'Mainboard'}) }}">
                    <input type="hidden" id="format" value="{{ format }}">
                    <input type="hidden" id="cardIdInput" name="cardId">
                    <input type="hidden" id="cardData" name="cardData">
                    <button id="save" class="h-10 border border-red-700  bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md hidden" type="submit">Ajouter la carte</button>
                </form>
                <div class="p-1 m-4rounded hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">
                    <input type="checkbox" id="noRestrictions" name="noRestrictions">
                    <label for="noRestrictions" class="text-sm italic text-red-700">Ignorer les restrictions du format</label>
                </div>
            {% else %}

                <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-3 mx-4">
                    <div class="flex flex-col md:flex-row items-center space-y-3 md:space-y-0 md:space-x-2 w-full md:w-auto">
                        <label for="searchId" class="sr-only">Rechercher une carte</label>
                        <input type="text" class="h-10 search bg-white border border-red-700 focus:border-red-900 text-red-900 placeholder-red-700 text-sm rounded-md px-3 focus:outline-none focus:ring-2 focus:ring-red-900 w-full md:w-64 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300" name="search" id="searchId" placeholder="Cherchez une carte...">
                        <label for="cardSelect" class="sr-only">Choisir une carte</label>
                    </div>
                    <select class="card" name="cardName" id="cardSelect"></select>
                    <button class="h-10 border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md transition duration-300 ease-in-out" type="button" id="researchStart">Rechercher</button><br>
                </div>

                <form id="saveCardForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id, 'state': 'Mainboard'}) }}">
                    <input type="hidden" id="cardIdInput" name="cardId">
                    <input type="hidden" id="cardData" name="cardData">
                    <button id="save" class="h-10 border border-red-700 bg-white text-red-700 px-4 rounded hover:bg-red-800 hover:text-white shadow-md hidden" type="submit">Ajouter la carte</button>
                </form>
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endif %}
{% endif %}
<div id="responseMessage" class="hidden text-center"></div> <!-- For displaying response messages -->

<div id="cardBoard" class="flex justify-center w-full">
    <div class="hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 shadow">
        <img id="cardImage" class="transform  rounded-xl bg-white shadow-xl transition duration-300 hover:scale-105">
    </div>
</div>

{# <div id="displayDeck" class="board"> #}
<div class="bg-white">
<div class="light-white w-full p-8 m-0 flex flex-wrap justify-center">
    {% set active = 'mb-4 font-semibold bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 mr-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300' %}
    {% set inactive = 'mb-4 font-semibold bg-white text-red-800 px-4 py-2 rounded hover:bg-red-800 hover:text-white mr-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300' %}

    {% if stateToken is same as 'Main' %}
    <a class=" {{ inactive }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Sideboard'}) }}">Sideboard</a>
    <a class="{{ active }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">Mainboard</a>
    <a class=" {{ inactive }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Maybeboard'}) }}">Maybeboard</a>

    {% endif %}
    {% if stateToken is same as 'Side' %}
    <a class="{{ active }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Sideboard'}) }}">Sideboard</a>
    <a class=" {{ inactive }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">Mainboard</a>
    <a class=" {{ inactive }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Maybeboard'}) }}">Maybeboard</a>

    {% endif %}
    {% if stateToken is same as 'Maybe' %}
    <a class=" {{ inactive }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Sideboard'}) }}">Sideboard</a>
    <a class=" {{ inactive }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">Mainboard</a>
    <a class="{{ active }}" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Maybeboard'}) }}">Maybeboard</a>

    {% endif %}
       
      
      
        <div class="px-8 mt-3 mb-5 w-full">

            <div class="flex justify-between mb-4 mr-4">
                <div>
                    <p class="inline-flex border bg-white px-2 py-1 rounded-lg text-sm">Nombre de cartes dans le deck : 
                        {{ count }}
                        {% if deck.format.formatName is same as 'Commander / EDH' %}
                            {% if count < 100 %}
                            / 100 <span class=" mx-1 text-xs text-red-600 italic">(non-légal)</span></p>
                            {% else %}
                            / 100</p><span class=" mx-1 text-xs text-green-600 italic">(légal)</span></p>    
                            {% endif %}
                        {% else %}
                            {% if count < 60 %}
                            / 60 <span class=" mx-1 text-xs text-red-600 italic">(non-légal)</span></p>
                            {% else %}
                            / 60</p><span class=" mx-1 text-xs text-green-600 italic">(légal)</span></p>
                            {% endif %}
                        {% endif %}
                </div>
                <div class="flex flex-end">
                    {% if app.user is same as deck.user %}                        
                        <button id="editDeckButton" class="mb-4 bg-red-800 text-white px-4 py-2 rounded hover:bg-red-900 mr-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">Modifier le deck</button>
                    {% endif %}
                    <button id="listViewBtn" class="mb-4 px-6 py-2 bg-gray-300 hover:bg-gray-400 rounded-l hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">List View</button>
                    <button id="imageViewBtn" class="mb-4 px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded-r hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] shadow duration-300">Image View</button>
                </div>
            </div>



            <article class="deckView flex justify-center ml-8">

                <div id="zoom" class="md:w-72 lg:w-96 lg:min-w-96 mr-6 ">
                    <div class="sticky top-48">
                        <img id="placeholder" class="w-full h-auto object-contain sticky top-36 rounded-xl" src="{{ asset('img/Magic_the_gathering-card_back.jpg') }}">
                        <span id="zoomIn">+</span><span id="zoomOut">-</span>
                    </div>
                </div>
            

                {% set card_types = ["Creature", "Sorcery", "Instant", "Enchantment", "Artifact", "Planeswalker", "Land", "Battle", "Plane", "Background", "Scheme"] %} 
                {# TODO ajouter les cartes doubles faces #}

        <div id="listView" class="flex flex-wrap border hover:shadow transition-all p-8 rounded duration-300 bg-white w-prose">

            {% if composition is same as null or composition is empty %}
            <div class="w-full flex justify-center items-center">
                {% if app.user is same as deck.user %}
                <p class="text-sm px-2 py-2 border rounded-lg bg-white">Vous n'avez pas encore de cartes dans cette liste ! Ajoutez des cartes à partir de la recherche ci-dessus !</p>
                {% else %}
                <p class="text-sm px-2 py-2 border rounded-lg bg-white">Il n'y a pas encore de cartes dans cette liste ! N'hésitez pas à faire des suggestions en commentaire !</p>
                {% endif %}
            <div>
            {% else %}
            {% endif %}
            {% for type in card_types %}
                {% set type_count = 0 %}
                {% for element in composition %}
                    {% if type in element.card.data.type_line %}
                        {% set type_count = type_count + 1 %}
                    {% endif %}
                {% endfor %}

                {% if type_count > 0 %}
                    <div id="{{ type|lower }}Cards" class="category-container mr-3">
                        <h3>{{ type }} ({{ type_count }})</h3>
                        <ul class="list-none">
                            {% for element in composition %}
                                {% if type in element.card.data.type_line %}
                                    <li>
                                        <div class="flex items-center text-sm">
                                            {% if element.card.data.legalities[format] is defined %}
                                                <a class="hover:shadow transform rounded-xl px-1" href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                    <span class="card-name pr-2
                                                        {% if element.card.data.legalities[format] is not same as 'legal' %}
                                                        text-grey-400 italic
                                                        {% endif %}"
                                                        
                                                            
                                                        data-image="
                                                        {% if element.card.data.image_uris.normal is defined  %}
                                                        {{ element.card.data.image_uris.normal }}
                                                        {% endif %}
                                                             ">
                                                        {{ element.quantity }}x {{ element.card.data.name }}
                                                    </span>
                                                </a>

                                                {% if element.card.data.legalities[format] is not same as 'legal' %}
                                                    <div class="hover-warning" title="La carte n'est pas légale dans ce format">
                                                        <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                    </div>
                                                {% endif %}

                                                {% if element.quantity > deck.format.maxQuantity %}
                                                    <div class="hover-warning" title="Quantité supérieure à la limite autorisée par le format">
                                                        <img class="w-4" src="https://img.icons8.com/color/48/error--v1.png" alt="yellow warning - quantity error"/>
                                                    </div>
                                                {% endif %}

                                                {% if format is same as('commander') and deck.commander is not null %}
                                                    {% set colorIdentity = deck.commander.color_identity %} 
                                                    {% set allColorsMatch = true %} {# Assume all colors match initially #}

                                                    {% for color in element.card.data.color_identity %}
                                                        {% if color not in colorIdentity %}
                                                            {% set allColorsMatch = false %} {# If any color doesn't match, set to false #}
                                                        {% endif %}
                                                    {% endfor %}

                                                    {% if allColorsMatch %}
                                                    {% else %}
                                                        <div class="hover-warning" title="La ou les couleurs de cette carte rendent le deck illégal">
                                                            <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                        </div>
                                                    {% endif %}
                                                {% endif %}
                                            {% endif %}
                                        </div>
                                        <span class="space-x-2 edit-links hidden">
                                            <a class="hover:underline" href="{{ path('plus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Mainboard'}) }}">+1</a>
                                            <a class="hover:underline" href="{{ path('minus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Mainboard'}) }}">-1</a>
                                            <a class="hover:underline red" href="{{ path('delete_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Mainboard'}) }}">Supprimer</a>
                                        </span>
                                    </li>
                                {% endif %}
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}
            {% endfor %}
        </div>
        
        <div id="imageView" class="grid grid-cols-1 gap-4 justify-center">
            {% for type in card_types %}
                {% set type_count = 0 %}
                {% for element in composition %}
                    {% if type in element.card.data.type_line %}
                        {% set type_count = type_count + 1 %}
                    {% endif %}
                {% endfor %}
                
                        {% if type_count > 0 %}
                            <div id="{{ type|lower }}Cards" class="category-container-image">
                                <h3>{{ type }} ({{ type_count }})</h3>
                                <div id="displayDeck" class="flex flex-wrap w-max-1/2">
                                    {% for element in composition %}
                                        {% if type in element.card.data.type_line %}
                                            <div class="card "> <!--hover:shadow-[0px_0px_10px_5px_rgb(_153,_27,_27)] shadow duration-100-->
                                                {% if element.card.data.legalities[format] is defined %}
                                                    {% if element.quantity > 1 %}
                                                        {% if element.quantity > deck.format.maxQuantity %}
                                                        <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                            <img class="singleCard transform  rounded-xl bg-white shadow-xl transition duration-300 hover:scale-105" {% if element.card.data.image_uris.normal is defined %}src="{{ element.card.data.image_uris.normal }}{% endif %}">
                                                            <span class="card-span red-span">X{{ element.quantity }}</span> 
                                                        </a>
                                                        {% else %}
                                                        <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                            <img class="singleCard transform  rounded-xl bg-white shadow-xl transition duration-300 hover:scale-105" {% if element.card.data.image_uris.normal is defined %}src="{{ element.card.data.image_uris.normal }}{% endif %}">
                                                            <span class="card-span white-span">X{{ element.quantity }}</span>
                                                        </a>
                                                        {% endif %}
                                                    {% else %}
                                                    <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                                        <img class="singleCard transform  rounded-xl bg-white shadow-xl transition duration-300 hover:scale-105" {% if element.card.data.image_uris.normal is defined %}src="{{ element.card.data.image_uris.normal }}{% endif %}">
                                                    </a>
                                                    {% endif %}
                                                    
                                                    {% if element.card.data.legalities[format] is not same as 'legal' %}
                                                        
                                                        <div class="warning-illegal w-full">
                                                            <div class="flex flex-col items-center justify-center">
                                                                <img class="w-10" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                                <p>Non-légale dans le format</p>
                                                            </div>
                                                        </div>
                                                            
                                                    {% endif %}
                                                    {% if element.quantity > deck.format.maxQuantity %}
                                                        
                                                        <div class="warning-quantity w-full">
                                                            <div class="flex flex-col items-center justify-center">
                                                                <img class="w-10" src="https://img.icons8.com/color/48/error--v1.png" alt="yellow warning - quantity error"/>
                                                                <p>Quantité autorisée dépassée</p>
                                                            </div>
                                                        </div>
                                                    {% endif %}
                                                    {% if format is same as('commander') and deck.commander is not null %}
                                                        {% set colorIdentity = deck.commander.color_identity %}
                                                        {% set allColorsMatch = true %} {# Assume all colors match initially #}
                                                        
                                                        {% for color in element.card.data.color_identity %}
                                                            {% if color not in colorIdentity %}
                                                                {% set allColorsMatch = false %} {# If any color doesn't match, set to false #}
                                                            {% endif %}
                                                        {% endfor %}

                                                        {% if allColorsMatch is same as false %}
                                                        <div class="warning-illegal w-full">
                                                            <div class="flex flex-col items-center justify-center">
                                                                <img class="w-10" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                                                <p>Identité de couleur non-autorisée</p>
                                                            </div>
                                                        </div>
                                                        {% endif %}
                                                    {% endif %}

                                                {% endif %}

                                                <span class="edit-links hidden">
                                                    <a class="hover:underline" href="{{ path('plus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Mainboard'}) }}">+1</a>
                                                    <a class="hover:underline" href="{{ path('minus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Mainboard'}) }}">-1</a>
                                                    <a class="hover:underline red" href="{{ path('delete_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Mainboard'}) }}">Supprimer</a>
                                                </span>
                                            </div>
                                        {% endif %}
                                    {% endfor %}
                                </div>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            </article>

        </div>


        <div id="sideboard" class="shadow p-4 mx-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] duration-300 transform rounded-lg bg-white transition">
            {% if stateToken is same as 'Main' %}
            <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Sideboard'}) }}">
                <h3 class="font-semibold hover:underline hover:text-red-800 text-center mb-4">Sideboard</h3>
            </a>
            {% elseif stateToken is same as 'Side' or stateToken is same as 'Maybe'  %}
            <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">
                <h3 class="font-semibold hover:underline hover:text-red-800 text-center mb-4">Mainboard</h3>
            </a>
            {% endif %}
            
            <ul class="list-none">
                {% for element in compositionSide %}
                        <li>
                            <div class="flex items-center text-sm">
                                {% if element.card.data.legalities[format] is defined %}
                                    <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                        <span class="card-name pr-2
                                            {% if element.card.data.legalities[format] is not same as 'legal' %}
                                            text-grey-400 italic
                                            {% endif %}"
                                            data-image="{{ element.card.data.image_uris.normal }}">
                                            {{ element.quantity }}x {{ element.card.data.name }}
                                        </span>
                                    </a>
        
                                    {% if element.card.data.legalities[format] is not same as 'legal' %}
                                        <div class="hover-warning" title="La carte n'est pas légale dans ce format">
                                            <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                        </div>
                                    {% endif %}
        
        
                                    {% if format is same as('commander') and deck.commander is not null %}
                                        {% set colorIdentity = deck.commander.colors %}
                                        {% set allColorsMatch = true %} {# Assume all colors match initially #}
        
                                        {% for color in element.card.data.color_identity %}
                                            {% if color not in colorIdentity %}
                                                {% set allColorsMatch = false %} {# If any color doesn't match, set to false #}
                                            {% endif %}
                                        {% endfor %}
        
                                        {% if allColorsMatch %}
                                        {% else %}
                                            <div class="hover-warning" title="La ou les couleurs de cette carte rendent le deck illégal">
                                                <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                            </div>
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            </div>
                            <span class="space-x-2 edit-links hidden">
                                <a class="hover:underline" href="{{ path('plus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Sideboard'}) }}">+1</a>
                                <a class="hover:underline" href="{{ path('minus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Sideboard'}) }}">-1</a>
                                <a class="hover:underline red" href="{{ path('delete_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Sideboard'}) }}">Supprimer</a>
                            </span>
                        </li>
                {% endfor %}
            </ul>
        </div>
        
        <div id="maybeboard" class="shadow p-4 mx-4 hover:shadow-[0px_10px_20px_0px_rgba(0,_0,_0,_0.15)] transform  rounded-lg bg-white duration-300 transition">
            {% if stateToken is same as 'Main' or stateToken is same as 'Side' %}
            <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Maybeboard'}) }}">
                <h3 class="font-semibold hover:text-red-800 hover:underline text-center mb-4">Maybeboard</h3>
            </a>
            {% elseif stateToken is same as 'Maybe' %}
            <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Maybeboard'}) }}">
                <h3 class="font-semibold hover:text-red-800 hover:underline text-center mb-4">Sideboard</h3>
            </a>
            {% endif %}
            <ul class="list-none">
                {% for element in compositionMaybe %}
                        <li>
                            <div class="flex items-center text-sm">
                                {% if element.card.data.legalities[format] is defined %}
                                    <a href="{{ path('app_card_detail', {'cardId': element.card.data.id }) }}">
                                        <span class="card-name pr-2
                                            {% if element.card.data.legalities[format] is not same as 'legal' %}
                                            text-grey-400 italic
                                            {% endif %}"
                                            data-image="{{ element.card.data.image_uris.normal }}">
                                            {{ element.quantity }}x {{ element.card.data.name }}
                                        </span>
                                    </a>
        
                                    {% if element.card.data.legalities[format] is not same as 'legal' %}
                                        <div class="hover-warning" title="La carte n'est pas légale dans ce format">
                                            <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                        </div>
                                    {% endif %}
        
                                    {% if format is same as('commander') and deck.commander is not null %}
                                        {% set colorIdentity = deck.commander.colors %}
                                        {% set allColorsMatch = true %} {# Assume all colors match initially #}
        
                                        {% for color in element.card.data.color_identity %}
                                            {% if color not in colorIdentity %}
                                                {% set allColorsMatch = false %} {# If any color doesn't match, set to false #}
                                            {% endif %}
                                        {% endfor %}
        
                                        {% if allColorsMatch %}
                                        {% else %}
                                            <div class="hover-warning" title="La ou les couleurs de cette carte rendent le deck illégal">
                                                <img class="w-4" src="https://img.icons8.com/color/48/spam.png" alt="red warning - not legal"/>
                                            </div>
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            </div>
                            <span class="space-x-2 edit-links hidden">
                                <a class="hover:underline" href="{{ path('plus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Maybeboard'}) }}">+1</a>
                                <a class="hover:underline" href="{{ path('minus_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Maybeboard'}) }}">-1</a>
                                <a class="hover:underline red" href="{{ path('delete_card_deck', {'user': deck.user.id, 'deck': deck.id, 'card': element.card.data.id, 'state': 'Maybeboard'}) }}">Supprimer</a>
                            </span>
                        </li>
                {% endfor %}
            </ul>

        </div>
    </div>

    <section id="graphSection" class="flex flex-wrap w-screen max-w-screen justify-center py-10">
        <input id="colorCount" type="hidden" value="{{ colorCount|json_encode }}">
        <input id="typeCount" type="hidden" value="{{ typeCount|json_encode }}">
        <input id="subtypeCount" type="hidden" value="{{ subtypeCount|json_encode }}">
        <input id="cmcCount" type="hidden" value="{{ cmcCount|json_encode }}">

        <div class="w-full flex flex-col space-x-6 justify-center items-center">
            <div class="h-72 min-h-72 max-h-72 inline-flex mb-4 space-x-4">
                <canvas id="manaColorChart"></canvas>
                <canvas id="typeChart"></canvas>
            </div>
            <div class="h-72 min-h-72 max-h-72 inline-flex space-x-4">
                <canvas id="cmcChart"></canvas>
                <canvas id="subtypeChart"></canvas>
            </div>
        </div>
    </section>
</div>
    <section class="bg-gray-100 w-full flex flex-col items-center justify-center">
        <div class="bg-gray-100 flex flex-col items-center justify-center">
            <!-- Toggle Button -->
            {% if app.user %}
                <button id="toggleCommentForm" class="bg-red-800 text-white h-10 mt-12 px-4 rounded-lg hover:bg-red-900 transition duration-300">
                    Ajouter un commentaire 
                </button>
            {% else %}
                <p class="text-red-600 mt-6 text-sm">Vous devez être connecté pour publier un commentaire.</p>
            {% endif %}
    
            <!-- Comment Form Section -->
            <div id="commentFormContainer" class="w-full max-w-2xl px-4 mt-10 hidden">
                <div class="bg-white rounded-2xl px-8 py-4 shadow-lg relative">
                    <!-- Close Button -->
                    <button id="closeCommentForm" class="absolute top-2 right-4 text-gray-600 hover:text-gray-800">
                        &times;
                    </button>
                    <h3 class="text-xl font-semibold mb-2">Ajouter un commentaire</h3>
                    {{ form_start(commentForm) }}
                        <div class="mb-4">
                            {{ form_row(commentForm.textContent, {'attr': {'class': 'w-full px-4 py-2 border rounded-lg focus:outline focus:outline-red-800'}}) }}
                        </div>
                        <div class="flex justify-end">
                            {{ form_row(commentForm.submit) }}
                        </div>
                    {{ form_end(commentForm) }}
                </div>
            </div>
        </div>
 
        <div class="bg-gray-100 p-10 flex flex-col items-center justify-center">
            <h3 class="text-2xl font-bold mb-4">Commentaires :</h3>
            <div class="w-full max-w-2xl px-4 mb-6">
                {% for comment in comments %}
                    <div class="bg-white rounded-2xl px-8 py-6 m-6 shadow-lg hover:shadow-2xl transition duration-500">
                        <div class="mb-4">
                            <p class="text-md text-gray-700">{{ comment.textContent }}</p>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="text-sm font-semibold">
                                {% if comment.user is same as null %}
                            <span class="italic font-normal">[profil supprimé]</span>
                            {% else %}
                            {{ comment.user.userName }} • 
                            {% endif %}
                            {% if comment.updateDate is same as null %}
                            <span class="font-normal">le {{ comment.creationDate|date('d.m.Y H:i') }}</span>
                            {% else %}
                                <span class="font-normal">modifié le {{ comment.updateDate|date('d.m.Y H:i') }}</span>
                            {% endif %}
                            </div>
                            {% if app.user is same as comment.user and app.user %}
                                <div class="flex space-x-4">
                                    <a href="{{ path('edit_comment', {'deck': deck.id, 'comment': comment.id}) }}" class="text-black hover:underline">Modifier</a>
                                    <form action="{{ path('delete_comment', {'deck': deck.id, 'comment': comment.id}) }}" method="post" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?');">
                                        <button type="submit" class="text-red-600 hover:underline">Supprimer</button>
                                    </form>
                                    {# <a href="#" class="text-red-600 hover:underline">Supprimer</a> #}
                                </div>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </section>
    
{# </div> #}


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>  //TODO max number of cards

    document.addEventListener('DOMContentLoaded', function() { 

            const placeholder = document.getElementById('placeholder');
            const cardImages = document.querySelectorAll('.singleCard');
            const cardNames = document.querySelectorAll('.card-name');
            const placeholderDefault = placeholder.src;
            const saveButton = document.getElementById('save');

            // Change placeholder image on card image hover
            cardImages.forEach(image => {
                image.addEventListener('mouseover', function () {
                    placeholder.src = this.src;
                });

                image.addEventListener('mouseout', function () {
                    placeholder.src = placeholderDefault; // or reset to a default image: 'placeholder.src = "default_image.jpg";'
                });
            });

            // Change placeholder image on card name hover
            cardNames.forEach(name => {
                name.addEventListener('mouseover', function () {
                    placeholder.src = this.dataset.image;
                });

                name.addEventListener('mouseout', function () {
                    placeholder.src = placeholderDefault; // or reset to a default image
                });
            });

            const searchInput = document.getElementById('searchId'); 
            const cardSelect = document.getElementById('cardSelect'); 
            const researchButton = document.getElementById('researchStart'); 
            const cardBoard = document.getElementById('cardBoard'); 
            const cardIdInput = document.getElementById('cardIdInput');
            const cardData = document.getElementById('cardData');

            const editDeckButton = document.getElementById('editDeckButton');
            const editLinks = document.querySelectorAll('.edit-links');

            if(editDeckButton) {
                editDeckButton.addEventListener('click', function() {
                    editLinks.forEach(function(link) {
                        link.classList.toggle('hidden');
                    });
                });
            }

            
            let url;
            let noRestrictions = document.getElementById('noRestrictions')
            console.log(noRestrictions);
            if(researchButton) {

                researchButton.addEventListener('click', function() { 

                    const query = searchInput.value; 

                    if (noRestrictions && noRestrictions.checked) {
                        url = `https://api.scryfall.com/cards/search?q=name:${query}`;
                    } else {
                        // Handle other form conditions
                        if (document.getElementById('saveCommanderForm')) {
                            url = `https://api.scryfall.com/cards/search?q=is:commander+name:${query}`;
                        } 
                        else if (document.getElementById('saveCardWithColorsForm')) {
                            url = `https://api.scryfall.com/cards/search?q=identity<=${document.getElementById('colors').value}+legal:commander+name:${query}`;
                        } 
                        else if (document.getElementById('saveCardFormatForm')) {
                            url = `https://api.scryfall.com/cards/search?q=legal:${document.getElementById('format').value}+name:${query}`;
                        } 
                        else if (document.getElementById('saveCardForm')) {
                            url = `https://api.scryfall.com/cards/search?q=name:${query}`;
                        } 
                    }
                    //TODO gérer la requête dynamiquement en fonction du format ! 
                    console.log(url);
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            if (data.data && Array.isArray(data.data)) { 
                                cardSelect.innerHTML = ''; // Clear previous entries
                                const emptySpace = document.createElement('option');
                                emptySpace.innerHTML = 'Veuillez choisir une carte';
                                cardSelect.appendChild(emptySpace);
            
                                data.data.forEach(card => {
                                    const option = document.createElement('option'); // Add an option for each card retrieved from the API
                                    const cardJS = JSON.stringify(card);
                                    option.value = JSON.stringify([card.id, cardJS, card.image_uris?.normal || '']);
            
                                    option.textContent = card.name;
                                    cardSelect.appendChild(option);
                                });
                            } else {
                                console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                            }
                        })
                        .catch(error => console.error('Erreur:', error));
                });
            }

            const stateSelector = document.getElementById('stateSelector');
            let saveCardForm = null

            if(document.getElementById('saveCardWithColorsForm')) {
                saveCardForm = document.getElementById('saveCardWithColorsForm');
            }
            if(document.getElementById('saveCardFormatForm')) {
                saveCardForm = document.getElementById('saveCardFormatForm');
            }
            if(document.getElementById('saveCardForm')) {
                saveCardForm = document.getElementById('saveCardForm');
            }

            const baseActionUrl = "{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id, 'state': 'PLACEHOLDER'}) }}"; // The base action URL

            if(stateSelector) {
                stateSelector.addEventListener('change', function() {
                    const selectedState = stateSelector.value; // Get the selected value (Mainboard, Sideboard, etc.)
                    
                    // Update the form action dynamically based on the selected value
                    const newAction = baseActionUrl.replace('PLACEHOLDER', `${selectedState}`);
                    saveCardForm.setAttribute('action', newAction);
                    console.log(newAction);
                });
            }

            if(cardSelect) {
                // Dynamic modification based on the user's selection in the select element
                cardSelect.addEventListener('change', function() {
                    const cardValue = JSON.parse(cardSelect.value); // Parse the JSON string back into an array
                    const cardId = cardValue[0]; // First element is the card ID
                    const cardDataJS = cardValue[1]; // Second element is the card data as JSON
                    const imageUrl = cardValue[2];
                    saveButton.classList.remove('hidden')
                    
                    cardIdInput.value = cardId;
                    cardData.value = cardDataJS;
            
                    const myNode = document.getElementById("cardBoard"); // Reset the card display if a new search is made
                    if (myNode) {
                        while (myNode.firstChild) { // Clear previously displayed cards
                            myNode.removeChild(myNode.lastChild);
                        }
                    }
            
                    if (imageUrl) {
                        const displayCard = new Image(250, 350); // Create an image to preview the selected commander
                        displayCard.src = imageUrl; 
            
                        displayCard.name = cardSelect.options[cardSelect.selectedIndex].textContent;
                        displayCard.classList.add('singleCard'); 
                        let cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; 
                        let link = document.createElement("a"); 
                        let url = cardDetailUrl.replace('REPLACE_CARD_ID', cardValue[0]);
            
                        link.href = url; 
                        link.appendChild(displayCard);
                        cardBoard.appendChild(link);
                    }
                });
            }

            document.getElementById('downloadButton').addEventListener('click', function() {
                var linksDiv = document.getElementById('downloadLinks');
                if (linksDiv.classList.contains('hidden')) {
                    linksDiv.classList.remove('hidden');
                    linksDiv.classList.add('inline-flex');
                } else {
                    linksDiv.classList.add('hidden');

                    if(linksDiv.classList.contains('inline-flex')) {
                        linksDiv.classList.remove('inline-flex');
                    }
                }
            });
            
            document.getElementById('closeButton').addEventListener('click', function() {
                document.getElementById('downloadLinks').classList.add('hidden');
            });
            
            // Close the links when any download link is clicked
            var downloadLinks = document.querySelectorAll('#downloadLinks a');
            downloadLinks.forEach(function(link) {
                link.addEventListener('click', function() {
                    document.getElementById('downloadLinks').classList.add('hidden');
                });
            });


            // Switch between list view and image view
            const listViewBtn = document.getElementById('listViewBtn');
            const imageViewBtn = document.getElementById('imageViewBtn');
            const listView = document.getElementById('listView');
            const imageView = document.getElementById('imageView');
        
            listView.classList.add('flex');
            imageView.classList.add('hidden');
        
            listViewBtn.addEventListener('click', function() {
                listView.classList.toggle('hidden', false);
                listView.classList.toggle('flex', true);
                imageView.classList.toggle('grid', false);
                imageView.classList.toggle('hidden', true);
            });
        
            imageViewBtn.addEventListener('click', function() {
                imageView.classList.toggle('hidden', false);
                imageView.classList.toggle('grid', true);
                listView.classList.toggle('flex', false);
                listView.classList.toggle('hidden', true);
            });



            const toggleButton = document.getElementById('toggleCommentForm');
            const formContainer = document.getElementById('commentFormContainer');
            const closeButton = document.getElementById('closeCommentForm');
            if(toggleButton) {
                // Show the form when the button is clicked
                toggleButton.addEventListener('click', function() {
                    formContainer.classList.toggle('hidden');
                    toggleButton.classList.toggle('hidden');
                });
            }

            // Hide the form when the close button is clicked
            closeButton.addEventListener('click', function() {
                formContainer.classList.add('hidden');
                toggleButton.classList.remove('hidden');

            });

            const manaColorCount = JSON.parse(document.getElementById('colorCount').value);
            const typeCount = JSON.parse(document.getElementById('typeCount').value);
            const subtypeCount = JSON.parse(document.getElementById('subtypeCount').value);
            const cmcCount = JSON.parse(document.getElementById('cmcCount').value);
            //console.log(manaColorCount);

            // Create a mapping of mana symbols to their corresponding names and colors
            const manaColorDetails = {
                'W': { name: 'Blanc', color: '#fff7d6' }, // Light Yellow for White
                'U': { name: 'Bleu', color: '#87ceeb' },  // Light Blue for Blue
                'B': { name: 'Noir', color: '#000000' },  // Black for Black
                'R': { name: 'Rouge', color: '#ff4500' }, // Red for Red
                'G': { name: 'Vert', color: '#228b22' }   // Green for Green
            };

            // Replace the mana color symbols with the mapped labels and colors
            const labels = Object.keys(manaColorCount).map(color => manaColorDetails[color]?.name || color);
            const backgroundColors = Object.keys(manaColorCount).map(color => manaColorDetails[color]?.color || '#cccccc'); // Default to gray if no color found


            const manaColorCtx = document.getElementById('manaColorChart').getContext('2d');
            new Chart(manaColorCtx, {
                type: 'pie',
                data: {
                    labels: labels, // Use the mapped labels
                    datasets: [{
                        data: Object.values(manaColorCount),
                        backgroundColor: backgroundColors, // Use the specific color for each mana type
                        borderWidth: 1,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Répartition des couleurs de mana'
                    }
                }
            });


        // Example for a bar chart (card types distribution)
        const typeCtx = document.getElementById('typeChart').getContext('2d');
        new Chart(typeCtx, {
            type: 'bar',
            data: {
                labels: Object.keys(typeCount),
                datasets: [{
                    label: 'Total cartes',
                    data: Object.values(typeCount),
                    backgroundColor: '#4caf50',
                    borderColor: '#388e3c',
                    borderWidth: 1,
                    hoverOffset: 4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Types de cartes'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Nombre de cartes'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Répartition selon les types de cartes'
                    }
                }
            }
        });

        // Subtype Chart
        const subtypeCtx = document.getElementById('subtypeChart').getContext('2d');
        new Chart(subtypeCtx, {
            type: 'bar',
            data: {
                labels: Object.keys(subtypeCount),
                datasets: [{
                    label: 'Total cartes',
                    data: Object.values(subtypeCount),
                    backgroundColor: '#ffcc66',
                    borderColor: '#ff9933',
                    borderWidth: 1,
                    hoverOffset: 4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Sous-types'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Nombre de cartes'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Répartition selon les sous-types'
                    }
                }
            }
        });

            // Extracting labels (CMC values) and quantities from the cmcCount array
            const cmcLabels = Object.keys(cmcCount); // CMC values (e.g., 0, 1, 2, 3, etc.)
            const cmcData = Object.values(cmcCount); // Quantities for each CMC value

            // Rendering the chart
            const ctx = document.getElementById('cmcChart').getContext('2d');
            const cmcChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: cmcLabels, // CMC values as labels
                    datasets: [{
                        label: 'Répartition du CMC',
                        data: cmcData, // Quantities for each CMC
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        hoverOffset: 4
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Nombre de cartes'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'CMC (Coût converti de mana)'
                            }
                        }
                    }
                }
            });


            const saveCardButton = document.getElementById('save');
            //const saveCardForm = document.getElementById('saveCardForm'); // Make sure this line is uncommented
            const responseMessage = document.getElementById('responseMessage');

            if(saveCardForm) {
                
                saveCardButton.addEventListener('click', function(event) {
                    // Prevent the default form submission
                    event.preventDefault();
                
                    const formData = new FormData(saveCardForm);
                
                    fetch(saveCardForm.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest' // Optional: Useful for detecting AJAX in Symfony
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok.');
                    })
                    .then(data => {
                        // Display success message or update UI accordingly
                        responseMessage.textContent = data.message; // Expecting a message in the JSON response
                        responseMessage.classList.remove('hidden');
                        responseMessage.classList.add('bg-green-500', 'text-white', 'p-2', 'rounded', 'text-center'); // Tailwind classes for styling
                        // Optionally clear or update form inputs
                        saveCardForm.reset();
                    })
                    .catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                        responseMessage.textContent = 'Une erreur est survenue lors de la sauvegarde de la carte.';
                        responseMessage.classList.remove('hidden');
                        responseMessage.classList.add('bg-red-500', 'text-white', 'p-2', 'rounded', 'text-center');
                    });
                });
            }

        });

</script>

{% endblock %}

