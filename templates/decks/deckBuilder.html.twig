{% extends 'base.html.twig' %}

{% block title %}Constructeur de deck{% endblock %}

{% block body %}

<h1>Deck Builder</h1>
<h2>{{ deck.deckName }}</h2>
<p>créé le {{ deck.creationDate|date('d.m.Y H:i') }}</p>
<p>Format : {{ deck.format.formatName}} <a href="">(modifier)</a></p> <!--TODO -> lien modifier-->
<p>
    Description du deck :<br>
    {% if deck.deckDescription is same as null %}
        Aucune description pour le moment...
        {% else %}
        {{ deck.deckDescription }}
    {% endif %}
</p>

{% if (deck.format.formatName is same as "Commander") and (deck.hasCommander is same as false) or (deck.hasCommander is same as null)  %} 
    Veuillez choisir un commandant pour le deck :
    <input type="text" class="search" name="search" id="searchId" placeholder="Chercher une carte...">
    <select class="card" name="cardName" id="cardSelect"></select>
    <button type="button" id="researchStart">Rechercher</button><br>
    
    <form id="saveCardForm" method="post" action="{{ path('save_card_deck', {'user': deck.user.id, 'deck': deck.id}) }}">
        <input type="hidden" id="cardIdInput" name="cardId">
        <input type="hidden" id="cardImageUrlInput" name="cardImageUrl">
        <button type="submit">Ajouter la carte</button>
    </form>
{% endif %}

    <div id="cardBoard" class="board">
        <img id="cardImage">
    </div>

    <div id="displayDeck" class="board">
        {% for card in deck.cards %}
            <img class="singleCard" src="{{ card.normalImageUrl }}">
        {% endfor %}
    </div>


<main>

</main>

{% block javascripts %} 


<script>


    document.addEventListener('DOMContentLoaded', function() { 

        const searchInput = document.getElementById('searchId'); 
        const cardSelect = document.getElementById('cardSelect'); 
        const researchButton = document.getElementById('researchStart'); 
        const cardBoard = document.getElementById('cardBoard'); 
        const saveCardForm = document.getElementById('saveCardForm');
        const cardIdInput = document.getElementById('cardIdInput');
        const cardImageUrlInput = document.getElementById('cardImageUrlInput');

    
        researchButton.addEventListener('click', function() { 
            const query = searchInput.value; 
    
            // fetch(`https://api.scryfall.com/cards/search?q=name:${query}+lang:fr`) 
            fetch(`https://api.scryfall.com/cards/search?q=is:commander+name:${query}`) //+type:legendary+type:creature
         
                .then(response => response.json())
                .then(data => {
                 //   console.log(data); Vérifie le format des données
    
                    if (data.data && Array.isArray(data.data)) { 
    
                        cardSelect.innerHTML = ''; // Supprime les entrées précédentes
    
                        data.data.forEach(card => {
                            
                            const option = document.createElement('option'); // rajoute une option au select pour chaque carte récupérée depuis l'API

                            option.value = [`${card.id}, ${card.image_uris.normal}`];
                            option.textContent = card.name;
                            cardSelect.appendChild(option);
                            //console.log(option.value)

                        });
                    } else {
                        console.error('Erreur: la réponse de l\'API ne contient pas un tableau de cartes dans "data"');
                    }
                })
                .catch(error => console.error('Erreur:', error));
        });

        
        // modification dynamique selon ce que l'utilsiateur choisit dans le select
        cardSelect.addEventListener('change', function() {
            let value = cardSelect.value;
            let text = cardSelect.options[cardSelect.selectedIndex].textContent;

             // explose le contenu du tableau au niveau de la virgule
            let valueArray = value.split(", ");

            let cardId = valueArray[0];
            let cardImageUrl = valueArray[1];
            cardIdInput.value = cardId;
            cardImageUrlInput.value = cardImageUrl;

            const myNode = document.getElementById("cardBoard"); // permet de réinitialiser l'affichage des cartes, si l'utilisateur appuie une nouvelle fois sur le bouton de recherche, les cartes affichées précédemment sont enlevées
            if (myNode) {
                while (myNode.firstChild) {// tant que cardBoard a des enfants (les cartes que l'on affiche)
                    myNode.removeChild(myNode.lastChild); // on enlève le dernier enfant de cardBoard jusqu'à ce qu'il n'y en ait plus
                }
            }

            //if (card.image_uris && card.image_uris.normal) {
                let displayCard = new Image(250,350); //création d'un affichage pour prévisualiser le commandant sélectionné dans le select
                displayCard.src = valueArray[1]; 
                displayCard.name = text ;
                displayCard.classList.add('singleCard'); 

                let cardDetailUrl = "{{ path('app_card_detail', {'cardId': 'REPLACE_CARD_ID' })}}"; 
                let link = document.createElement("a"); 
                let url = cardDetailUrl.replace('REPLACE_CARD_ID', valueArray[0]);
                link.href = url; 

                link.appendChild(displayCard);
                cardBoard.appendChild(link)
            //}
           // console.log(value, text);
        });

        function select() {
            cardSelect.dispatchEvent(new Event('change'));
        }

        // Déclenchement manuel de l'événement change pour considérer la première valeur
        //if(cardSelect.value)
        //cardSelect.dispatchEvent(new Event('change'));
    });





</script>

    {# let image = document.getElementById('cardImage')
    //image.src = card.image_uris.normal
    let select = document.getElementById('cardName')
    let option = select.option
    let card = option.value

    if (card.image_uris && card.image_uris.normal && card) {
        //let displayCard = new Image(250,350); 
       image.src = card; 
        //displayCard.id = `${card.id}`
        displayCard.classList.add('singleCard'); 
    }


    function updateCardImage() {
        let image = document.getElementById('cardImage')
        image.src = card.image_uris.normal

        if (card.image_uris && card.image_uris.normal) {
            //let displayCard = new Image(250,350); 
            image.src = `${card.image_uris.normal}`; 
            //displayCard.id = `${card.id}`
            displayCard.classList.add('singleCard'); 
        }
    } #}

{% endblock %}
{% endblock %}
