{% extends 'base.html.twig' %}

{% block title %}Liste des decks{% endblock %}

{% block body %}

<div class="light-white">

    <h1 class="flex justify-center gradient-adapt text-white text-2xl px-6 py-10 mb-6"><span class="border border-white rounded px-6 py-4">Tous les decks</span></h1>


    <div class="max-w-10/12 px-40 py-10">
        <div class="flex justify-evenly items-center ml-8 mr-12">
                <div class="flex flex-row ml-8 space-x-4 text-sm">
                    <a href="{{ path('app_decks', {'param': 'all'}) }}" class="border-2 inline-flex justify-center px-2 py-2 rounded-lg  text-black font-semibold bg-white  hover:bg-red-900 hover:text-white transition duration-300 ease-in-out">Tous les decks</a>
                    {% if app.user %}
                    <a href="{{ path('app_decks', {'param': 'myDecks'}) }}" class="border-2 inline-flex justify-center px-2 py-2 rounded-lg  text-black font-semibold bg-white  hover:bg-red-900 hover:text-white transition duration-300 ease-in-out">Mes decks</a>
                    <a href="{{ path('app_decks', {'param': 'decksLiked'}) }}" class="border-2 inline-flex justify-center px-2 py-2 rounded-lg  text-black font-semibold bg-white  hover:bg-red-900 hover:text-white transition duration-300 ease-in-out">
                        Decks favoris
                        <img class="h-4 mt-1 w-auto ml-2" src="https://img.icons8.com/material-rounded/24/like--v1.png" alt="like--v1"/>
                    </a>
                    {% endif %}
                </div>

                <div id="center" class="">
                    <div class="inline-flex text-sm px-2 space-x-2 space-y-2">
                        <select class="text-sm px-2 border rounded-lg" name="format" id="format">
                            <option value="">Tous les formats</option>
                            <option value="Commander">Commander</option>
                            <option value="Standard">Standard</option>
                            <option value="Legacy">Legacy</option>
                        </select>
                    <div>
                            <div class="flex flex-col space-y-4 mx-2">
                                <select id="filter-mode" class="p-2">
                                    <option value="contains">Contient</option>
                                    <option value="exact">Correspond exactement</option>
                                </select>
                                <div class="inline-flex space-x-2">
                                    <label for="filter-mana-red"><img class="w-20 h-auto"  src="/icons/mana/R.webp" alt="Symbole de mana rouge"></label>
                                    <input id="filter-mana-red" type="checkbox" class="filter-mana" value="R">
                                    
                                    <label for="filter-mana-blue"><img class="w-20 h-auto" src="/icons/mana/U.webp" alt="Symbole de mana bleu"></label>
                                    <input id="filter-mana-blue" type="checkbox" class="filter-mana" value="U">
                                    
                                    <label for="filter-mana-white"><img class="w-20 h-auto" src="/icons/mana/W.webp" alt="Symbole de ana blanc"></label>
                                    <input id="filter-mana-white" type="checkbox" class="filter-mana" value="W">
                                    
                                    <label for="filter-mana-green"><img class="w-20 h-auto" src="/icons/mana/G.webp" alt="Symbole de mana vert"></label>
                                    <input id="filter-mana-green" type="checkbox" class="filter-mana" value="G">
                                    
                                    <label for="filter-mana-black"><img class="w-20 h-auto" src="/icons/mana/B.webp" alt="Symbole de mana noir"></label>
                                    <input id="filter-mana-black" type="checkbox" class="filter-mana" value="B">
                                </div>
                                
                            </div>
                </div>
                        
                        <input id="deck-search-bar" class="w-full px-4 py-2 border rounded-lg focus:outline focus:outline-red-800" placeholder="Filtrer par nom de deck" type="text" onkeyup="filterUsers()">
            </div>
                    {# <button class="flex-end text-sm underline">Plus de filtres</button> #}
        </div>
    </div>

    <div class="flex flex-wrap justify-center max-w-10/12 py-12">

        {% for deck in decks %}

        <div data-color-count="{{ deck.colorCount | json_encode }}"  class="deck-card mx-2 mb-8 py-2 px-4 w-full sm:w-64 md:w-64 lg:w-64 border-spacing-2 space-y-4 border bg-white rounded-lg transform transition duration-300 hover:scale-105">
                <input class="deck-name" type="hidden" value="{{deck.deckName}}" >
                <span class="ml-2 pr-2 pb-1 text-xs italic flex justify-end">
                {% if deck.updateDate is same as null %}
                créé le {{ deck.creationDate|date('d.m.Y à H:i')}}
                {% else %}
                dernière m-a-j le {{ deck.updateDate|date('d.m.Y à H:i') }}
                {% endif %}
                </span>

                {% if deck.commander is not null %}
                    <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}"> 
                        <div class="flex justify-center border px-2 py-2 w-full">
                            <img class="h-36 object-cover" src="{{ deck.commander.image_uris.art_crop }}">
                        </div>
                    </a>
                {% else %}
                    {% if deck.format.formatName is same as "Legacy" %}
                    <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">
                        <div class="flex justify-center border px-2 py-2 w-full">
                            <img class="h-36 object-cover" src='{{ asset('img/placeholder-legacy.png')}}'>
                        </div>
                    </a>
                    {% endif %}
                    {% if deck.format.formatName is same as "Standard" %}
                        <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">
                            <div class="flex justify-center border px-2 py-2 w-full">
                                <img class="h-36 object-cover" src='{{ asset('img/placeholder-standard.png')}}'>
                            </div>
                        </a>
                    {% endif %}
                    {% if deck.format.formatName is same as "Commander / EDH" %}
                        <a href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}">
                            <div class="flex justify-center border px-2 py-2 w-full">
                                <img class="h-36 object-cover" src='{{ asset('img/placeholder-edh.png')}}'>
                            </div>
                        </a>
                    {% endif %}
                {% endif %}

                <div class="flex flex-col m-4 h-auto justify-end">
                    <a class="inline-flex w-prose" href="{{ path('app_deck_builder', {'id': deck.id, 'state': 'Mainboard'}) }}"> 
                        <h3 class="bold">{{ deck.deckName }}</h3>
                    </a>
                    <span class="text-gray-500">
                        {{ deck.format.formatName }}
                    </span> 
                    <span class="text-xs text-gray-500 ">
                        par <span class="font-semibold hover:underline hover:text-red-800"><a href="{{ path('app_profile', {'user': deck.user.username}) }}">{{ deck.user.userName }}</a></span>
                    </span>

                    {% set colorCount = deck.colorCount %}
                    <div class="inline-flex justify-between mt-3">
                        <span class="inline-flex space-x-1">
                            {% set colorImageMap = {
                                'W': '/img/colors/soleil.webp',
                                'U': '/img/colors/goutte.webp',
                                'B': '/img/colors/mortmort.webp',
                                'R': '/img/colors/flamme.webp',
                                'G': '/img/colors/arbreuh.webp'
                            } %}
                        
                            {% for color, count in colorCount %}
                                {% if colorImageMap[color] is defined %}
                                    <img class="h-4 mt-1 w-auto" 
                                         src="{{ colorImageMap[color] }}" 
                                         alt="{{ color }}"/>
                                {% endif %}
                            {% endfor %}
                        </span>
                        <span class="inline-flex space-x-2">
                            <span class="flex text-sm mt-1">
                                <img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-outlined/24/comments--v1.png" alt="like--v1"/>
                                {{ deck.comments|length }}
                            </span>
                            <span class="flex text-sm mt-1">
                                <img class="h-4 mt-1 w-auto" src="https://img.icons8.com/material-outlined/24/like--v1.png" alt="like--v1"/>
                                {{ deck.likes|length }}
                            </span>
                        </span>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>



{% block javascripts %} 

<script>

    document.addEventListener('DOMContentLoaded', function() {

    function filterUsers() {
        // Get the search query
        var query = document.getElementById('deck-search-bar').value.toLowerCase();
        // Get all the user forms
        var cards = document.querySelectorAll('.deck-card');
        
        cards.forEach(function(card) {
            // Get the input field with the user's name
            var input = card.querySelector('.deck-name');
            var name = input.value.toLowerCase();
            
            // Check if the name contains the search query
            if (name.includes(query)) {
                card.style.display = 'block';  // Show the form if it matches
            } else {
                card.style.display = 'none';   // Hide the form if it doesn't match
            }
        });
    }

       // Function to filter decks by format using the dropdown
       function filterFormat() {
        // Get the selected format
        var selectedFormat = document.getElementById('format').value;

        // Get all the deck cards
        var cards = document.querySelectorAll('.deck-card');

        cards.forEach(function(card) {
            // Find the format text in the card
            var formatText = card.querySelector('span.text-gray-500').innerText;

            // Check if the card's format matches the selected format
            if (formatText.includes(selectedFormat) || selectedFormat === "") {
                card.style.display = 'block';  // Show the card if it matches or if no format is selected
            } else {
                card.style.display = 'none';   // Hide the card if it doesn't match
            }
        });
    }

    // Trigger the filterFormat function when the format dropdown changes
    document.getElementById('format').addEventListener('change', filterFormat);
    
    // Existing code for mana filter and search functionality
    document.querySelectorAll('.filter-mana').forEach(function(checkbox) {
        checkbox.addEventListener('change', filterMana);
    });

// Trigger the mana filter whenever a checkbox or the mode selector is changed
document.querySelectorAll('.filter-mana').forEach(function(checkbox) {
    checkbox.addEventListener('change', filterMana);
});

document.getElementById('filter-mode').addEventListener('change', filterMana);

function filterMana() {
    // Get the selected filter mode (either 'contains' or 'exact')
    var filterMode = document.getElementById('filter-mode').value;
    
    // Get all selected mana colors
    var selectedColors = Array.from(document.querySelectorAll('.filter-mana:checked'))
                              .map(function(checkbox) {
                                  return checkbox.value;
                              });
    
    // Get all the deck cards
    var cards = document.querySelectorAll('.deck-card');
    
    cards.forEach(function(card) {
        // Assuming `deck-color-count` contains the JSON string of colorCount
        var colorCount = JSON.parse(card.getAttribute('data-color-count'));
        var deckColors = Object.keys(colorCount);

        let matches = false;

        if (filterMode === 'contains') {
            // "Contains Any" mode: deck must contain at least one of the selected colors
            matches = selectedColors.some(function(color) {
                return colorCount.hasOwnProperty(color);
            });
        } else if (filterMode === 'exact') {
            // "Exact Match" mode: deck must have exactly the selected colors (ignores counts)
            matches = (selectedColors.length === deckColors.length) &&
                      selectedColors.every(function(color) {
                          return deckColors.includes(color);
                      });
        }

        // Show or hide the card based on the match
        if (matches || selectedColors.length === 0) {
            card.style.display = 'block';  // Show if it matches or no color is selected
        } else {
            card.style.display = 'none';   // Hide if no match
        }
    });
}
    });
</script>
{% endblock %}
{% endblock %}